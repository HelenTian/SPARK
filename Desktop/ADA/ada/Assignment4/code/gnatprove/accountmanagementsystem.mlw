(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer 
 
 function first 
   :int =
  ( -128 )
 
 function last 
   :int =
  127
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer 
 
 function first 
   :int =
  ( -32768 )
 
 function last 
   :int =
  32767
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer 
 
 function first 
   :int =
  ( -2147483648 )
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer 
 
 function first 
   :int =
  ( -9223372036854775808 )
 
 function last 
   :int =
  9223372036854775807
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer 
 
 function first 
   :int =
  ( -9223372036854775808 )
 
 function last 
   :int =
  9223372036854775807
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive 
 
 function first 
   :int =
  1
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type short_float 
 
 function first 
   :real =
  (-.340282346638528859811704183484516925440.0)
 
 function last 
   :real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = short_float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type float 
 
 function first 
   :real =
  (-.340282346638528859811704183484516925440.0)
 
 function last 
   :real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type long_float 
 
 function first 
   :real =
  (-.179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 function last 
   :real =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_float, 
 function round_real_tmp = Floating.round_double, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "long_long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type long_long_float 
 
 function first 
   :real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last 
   :real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  255
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  65535
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing The array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int
 use import "_gnatprove_standard".Main
 use import "int".Int

 function index_I1_one 
   :int =
  1
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int

 type component_type  = 
  Standard__character.character
 
 function index_1_id 
   (x : int)  :int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string  = 
  __t
 
 function to_string 
   (x : Main.__image)  :string
 
 function from_string 
   (x : string)  :Main.__image
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__character.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Array__Int

 type component_type  = 
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int)  :int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_character.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Array__Int

 type component_type  = 
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int)  :int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_wide_character.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function first 
   :Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   :Main.__fixed =
  9223372036854775807
 
 function inv_small 
   :Main.__fixed =
  1000000000
 
 predicate in_range
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 
 
 function first 
   :int =
  ( -128 )
 
 function last 
   :int =
  127
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 
 
 function first 
   :int =
  ( -32768 )
 
 function last 
   :int =
  32767
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 
 
 function first 
   :int =
  ( -2147483648 )
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 
 
 function first 
   :int =
  ( -9223372036854775808 )
 
 function last 
   :int =
  9223372036854775807
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer 
 
 function first 
   :int =
  ( -9223372036854775808 )
 
 function last 
   :int =
  9223372036854775807
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "universal_real", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_real
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type universal_real 
 
 function first 
   :real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last 
   :real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = universal_real, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for defining the constant "max_userid" defined at measures.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Measures__max_userid
 use import "_gnatprove_standard".Main
 use        Standard__integer

 function max_userid "GP_CE_Relevant" 
   :Standard__integer.__split

end

(* Module for axiomatizing type "TuseridB" defined at measures.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Measures__TuseridB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tuseridB 
 
 function first 
   :int =
  ( -2147483648 )
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tuseridB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "userid" defined at measures.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Measures__userid
 use import "_gnatprove_standard".Main
 use import "int".Int

 type userid 
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = userid, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for defining the constant "max_bpm" defined at measures.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Measures__max_bpm
 use import "_gnatprove_standard".Main
 use        Standard__integer

 function max_bpm "GP_CE_Relevant" 
   :Standard__integer.__split

end

(* Module for axiomatizing type "TbpmB" defined at measures.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Measures__TbpmB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tbpmB 
 
 function first 
   :int =
  ( -2147483648 )
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tbpmB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "bpm" defined at measures.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Measures__bpm
 use import "_gnatprove_standard".Main
 use import "int".Int

 type bpm 
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  300
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = bpm, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for defining the constant "max_footsteps" defined at measures.ads:15, created in Gnat2Why.Decls.Translate_Constant *)
module Measures__max_footsteps
 use import "_gnatprove_standard".Main
 use        Standard__integer

 function max_footsteps "GP_CE_Relevant" 
   :Standard__integer.__split

end

(* Module for axiomatizing type "TfootstepsB" defined at measures.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Measures__TfootstepsB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tfootstepsB 
 
 function first 
   :int =
  ( -2147483648 )
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tfootstepsB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "footsteps" defined at measures.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Measures__footsteps
 use import "_gnatprove_standard".Main
 use import "int".Int

 type footsteps 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  100000
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = footsteps, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "TlatitudeB" defined at measures.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Measures__TlatitudeB
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type tlatitudeB 
 
 function first 
   :real =
  (-.340282346638528859811704183484516925440.0)
 
 function last 
   :real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = tlatitudeB, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "latitude" defined at measures.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Measures__latitude
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type latitude 
 
 function first 
   :real =
  (-.90.0)
 
 function last 
   :real =
  (90.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = latitude, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "TlongitudeB" defined at measures.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Measures__TlongitudeB
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type tlongitudeB 
 
 function first 
   :real =
  (-.340282346638528859811704183484516925440.0)
 
 function last 
   :real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = tlongitudeB, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "longitude" defined at measures.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Measures__longitude
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type longitude 
 
 function first 
   :real =
  (-.180.0)
 
 function last 
   :real =
  (180.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = longitude, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "gpslocation" defined at measures.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Measures__gpslocation
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Measures__latitude
 use        Measures__longitude

 type __split_fields  = 
  { rec__lat : Measures__latitude.latitude; rec__long : Measures__longitude.longitude }
 
 type gpslocation  = 
  { __split_fields : __split_fields }
 
 predicate lat__pred
   (a : gpslocation)  =
  true
 
 val rec__lat_ 
   (a : gpslocation)  :Measures__latitude.latitude
  requires { (lat__pred a) }
  ensures { (result = a.__split_fields.rec__lat) }

 
 predicate long__pred
   (a : gpslocation)  =
  true
 
 val rec__long_ 
   (a : gpslocation)  :Measures__longitude.longitude
  requires { (long__pred a) }
  ensures { (result = a.__split_fields.rec__long) }

 
 function bool_eq 
   (a : gpslocation) (b : gpslocation)  :bool =
  (if (( ((Measures__latitude.to_real a.__split_fields.rec__lat) = (Measures__latitude.to_real b.__split_fields.rec__lat)) /\ ((Measures__longitude.to_real a.__split_fields.rec__long) = (Measures__longitude.to_real b.__split_fields.rec__long)) )) then (
   True) else (
   False))
 
 function user_eq 
   (a : gpslocation) (b : gpslocation)  :bool
 
 function value__size 
   :int
 
 function object__size 
   (a : gpslocation)  :int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a  : gpslocation.
   ((object__size a) >= 0))
 
 function dummy 
   :gpslocation

end

(* Module for axiomatizing type "TusersarrayB" defined at accountmanagementsystem.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__TusersarrayB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Array__Int
 use        Measures__TuseridB
 use        Measures__userid

 type component_type  = 
  bool
 
 function index_1_id 
   (x : int)  :int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 type index_base_type = Measures__TuseridB.tuseridB, 
 type index_rep_type = int, 
 function to_rep = Measures__TuseridB.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Measures__TuseridB.in_range, 
 predicate index_dynamic_property = Measures__userid.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tusersarrayB  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Boolean.to_int, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq
 
 clone export "ada__model".Standard_Array_Logical_Op_Axioms with
 type map = Array__Int.map component_type, 
 function get = Array__Int.get, 
 function xorb = Array__Int.xorb, 
 function andb = Array__Int.andb, 
 function orb = Array__Int.orb, 
 function notb = Array__Int.notb, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one

end

(* Module for axiomatizing type "usersarray" defined at accountmanagementsystem.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__usersarray
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Array__Int

 type component_type  = 
  bool
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int
 
 type usersarray  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Boolean.to_int, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq
 
 clone export "ada__model".Standard_Array_Logical_Op_Axioms with
 type map = Array__Int.map component_type, 
 function get = Array__Int.get, 
 function xorb = Array__Int.xorb, 
 function andb = Array__Int.andb, 
 function orb = Array__Int.orb, 
 function notb = Array__Int.notb, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one

end

(* Module for axiomatizing type "TuseruserarrayB" defined at accountmanagementsystem.ads:17, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__TuseruserarrayB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__TuseridB
 use        Measures__userid

 type component_type  = 
  Measures__userid.userid
 
 function index_1_id 
   (x : int)  :int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 type index_base_type = Measures__TuseridB.tuseridB, 
 type index_rep_type = int, 
 function to_rep = Measures__TuseridB.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Measures__TuseridB.in_range, 
 predicate index_dynamic_property = Measures__userid.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tuseruserarrayB  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Measures__userid.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "useruserarray" defined at accountmanagementsystem.ads:17, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__useruserarray
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__userid

 type component_type  = 
  Measures__userid.userid
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int
 
 type useruserarray  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Measures__userid.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "TvitalsarrayB" defined at accountmanagementsystem.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__TvitalsarrayB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__TuseridB
 use        Measures__userid
 use        Measures__bpm

 type component_type  = 
  Measures__bpm.bpm
 
 function index_1_id 
   (x : int)  :int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 type index_base_type = Measures__TuseridB.tuseridB, 
 type index_rep_type = int, 
 function to_rep = Measures__TuseridB.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Measures__TuseridB.in_range, 
 predicate index_dynamic_property = Measures__userid.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tvitalsarrayB  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Measures__bpm.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "vitalsarray" defined at accountmanagementsystem.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__vitalsarray
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__bpm

 type component_type  = 
  Measures__bpm.bpm
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int
 
 type vitalsarray  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Measures__bpm.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "TfootstepsarrayB" defined at accountmanagementsystem.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__TfootstepsarrayB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__TuseridB
 use        Measures__userid
 use        Measures__footsteps

 type component_type  = 
  Measures__footsteps.footsteps
 
 function index_1_id 
   (x : int)  :int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 type index_base_type = Measures__TuseridB.tuseridB, 
 type index_rep_type = int, 
 function to_rep = Measures__TuseridB.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Measures__TuseridB.in_range, 
 predicate index_dynamic_property = Measures__userid.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tfootstepsarrayB  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Measures__footsteps.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "footstepsarray" defined at accountmanagementsystem.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__footstepsarray
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__footsteps

 type component_type  = 
  Measures__footsteps.footsteps
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int
 
 type footstepsarray  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Measures__footsteps.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "TlocationsarrayB" defined at accountmanagementsystem.ads:22, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__TlocationsarrayB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__TuseridB
 use        Measures__userid
 use        Measures__gpslocation

 type component_type  = 
  Measures__gpslocation.gpslocation
 
 function index_1_id 
   (x : int)  :int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 type index_base_type = Measures__TuseridB.tuseridB, 
 type index_rep_type = int, 
 function to_rep = Measures__TuseridB.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Measures__TuseridB.in_range, 
 predicate index_dynamic_property = Measures__userid.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tlocationsarrayB  = 
  __t

end

(* Module for axiomatizing type "locationsarray" defined at accountmanagementsystem.ads:22, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__locationsarray
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__gpslocation

 type component_type  = 
  Measures__gpslocation.gpslocation
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int
 
 type locationsarray  = 
  __t

end

(* Module for axiomatizing type "T33s" defined at accountmanagementsystem.ads:39, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__init__L32s__T33s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t33s 
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t33s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "T35s" defined at accountmanagementsystem.ads:40, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__init__L34s__T35s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t35s 
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t35s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "T37s" defined at accountmanagementsystem.ads:41, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__init__L36s__T37s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t37s 
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t37s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "T39s" defined at accountmanagementsystem.ads:42, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__init__L38s__T39s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t39s 
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t39s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "T41s" defined at accountmanagementsystem.ads:43, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__init__L40s__T41s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t41s 
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t41s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for defining the constant "wearer" defined at accountmanagementsystem.ads:49, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__setinsurer__wearer
 use import "_gnatprove_standard".Main
 use        Measures__userid

 function wearer "GP_CE_Relevant" 
   :Measures__userid.__split

end

(* Module giving an empty axiom for the entity "wearer" defined at accountmanagementsystem.ads:49, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__setinsurer__wearer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "insurer" defined at accountmanagementsystem.ads:49, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__setinsurer__insurer
 use import "_gnatprove_standard".Main
 use        Measures__userid

 function insurer "GP_CE_Relevant" 
   :Measures__userid.__split

end

(* Module giving an empty axiom for the entity "insurer" defined at accountmanagementsystem.ads:49, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__setinsurer__insurer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "wearer" defined at accountmanagementsystem.ads:53, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__readinsurer__wearer
 use import "_gnatprove_standard".Main
 use        Measures__userid

 function wearer "GP_CE_Relevant" 
   :Measures__userid.__split

end

(* Module giving an empty axiom for the entity "wearer" defined at accountmanagementsystem.ads:53, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__readinsurer__wearer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "wearer" defined at accountmanagementsystem.ads:56, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__removeinsurer__wearer
 use import "_gnatprove_standard".Main
 use        Measures__userid

 function wearer "GP_CE_Relevant" 
   :Measures__userid.__split

end

(* Module giving an empty axiom for the entity "wearer" defined at accountmanagementsystem.ads:56, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__removeinsurer__wearer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "wearer" defined at accountmanagementsystem.ads:60, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__setfriend__wearer
 use import "_gnatprove_standard".Main
 use        Measures__userid

 function wearer "GP_CE_Relevant" 
   :Measures__userid.__split

end

(* Module giving an empty axiom for the entity "wearer" defined at accountmanagementsystem.ads:60, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__setfriend__wearer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "friend" defined at accountmanagementsystem.ads:60, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__setfriend__friend
 use import "_gnatprove_standard".Main
 use        Measures__userid

 function friend "GP_CE_Relevant" 
   :Measures__userid.__split

end

(* Module giving an empty axiom for the entity "friend" defined at accountmanagementsystem.ads:60, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__setfriend__friend__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "wearer" defined at accountmanagementsystem.ads:64, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__readfriend__wearer
 use import "_gnatprove_standard".Main
 use        Measures__userid

 function wearer "GP_CE_Relevant" 
   :Measures__userid.__split

end

(* Module giving an empty axiom for the entity "wearer" defined at accountmanagementsystem.ads:64, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__readfriend__wearer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "wearer" defined at accountmanagementsystem.ads:67, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__removefriend__wearer
 use import "_gnatprove_standard".Main
 use        Measures__userid

 function wearer "GP_CE_Relevant" 
   :Measures__userid.__split

end

(* Module giving an empty axiom for the entity "wearer" defined at accountmanagementsystem.ads:67, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__removefriend__wearer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "wearer" defined at accountmanagementsystem.ads:71, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__updatevitals__wearer
 use import "_gnatprove_standard".Main
 use        Measures__userid

 function wearer "GP_CE_Relevant" 
   :Measures__userid.__split

end

(* Module giving an empty axiom for the entity "wearer" defined at accountmanagementsystem.ads:71, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__updatevitals__wearer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "newvitals" defined at accountmanagementsystem.ads:71, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__updatevitals__newvitals
 use import "_gnatprove_standard".Main
 use        Measures__bpm

 function newvitals "GP_CE_Relevant" 
   :Measures__bpm.__split

end

(* Module giving an empty axiom for the entity "newvitals" defined at accountmanagementsystem.ads:71, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__updatevitals__newvitals__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "wearer" defined at accountmanagementsystem.ads:75, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__updatefootsteps__wearer
 use import "_gnatprove_standard".Main
 use        Measures__userid

 function wearer "GP_CE_Relevant" 
   :Measures__userid.__split

end

(* Module giving an empty axiom for the entity "wearer" defined at accountmanagementsystem.ads:75, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__updatefootsteps__wearer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "newfootsteps" defined at accountmanagementsystem.ads:75, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__updatefootsteps__newfootsteps
 use import "_gnatprove_standard".Main
 use        Measures__footsteps

 function newfootsteps "GP_CE_Relevant" 
   :Measures__footsteps.__split

end

(* Module giving an empty axiom for the entity "newfootsteps" defined at accountmanagementsystem.ads:75, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__updatefootsteps__newfootsteps__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "wearer" defined at accountmanagementsystem.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__updatelocation__wearer
 use import "_gnatprove_standard".Main
 use        Measures__userid

 function wearer "GP_CE_Relevant" 
   :Measures__userid.__split

end

(* Module giving an empty axiom for the entity "wearer" defined at accountmanagementsystem.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__updatelocation__wearer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "newlocation" defined at accountmanagementsystem.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__updatelocation__newlocation
 use import "_gnatprove_standard".Main
 use        Measures__gpslocation

 function newlocation 
   :Measures__gpslocation.gpslocation

end

(* Module giving an empty axiom for the entity "newlocation" defined at accountmanagementsystem.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__updatelocation__newlocation__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "requester" defined at accountmanagementsystem.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__readvitals__requester
 use import "_gnatprove_standard".Main
 use        Measures__userid

 function requester "GP_CE_Relevant" 
   :Measures__userid.__split

end

(* Module giving an empty axiom for the entity "requester" defined at accountmanagementsystem.ads:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__readvitals__requester__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "targetuser" defined at accountmanagementsystem.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__readvitals__targetuser
 use import "_gnatprove_standard".Main
 use        Measures__userid

 function targetuser "GP_CE_Relevant" 
   :Measures__userid.__split

end

(* Module giving an empty axiom for the entity "targetuser" defined at accountmanagementsystem.ads:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__readvitals__targetuser__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "requester" defined at accountmanagementsystem.ads:96, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__readvitals_alt__requester
 use import "_gnatprove_standard".Main
 use        Measures__userid

 function requester "GP_CE_Relevant" 
   :Measures__userid.__split

end

(* Module giving an empty axiom for the entity "requester" defined at accountmanagementsystem.ads:96, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__readvitals_alt__requester__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "targetuser" defined at accountmanagementsystem.ads:96, created in Gnat2Why.Decls.Translate_Constant *)
module Accountmanagementsystem__readvitals_alt__targetuser
 use import "_gnatprove_standard".Main
 use        Measures__userid

 function targetuser "GP_CE_Relevant" 
   :Measures__userid.__split

end

(* Module giving an empty axiom for the entity "targetuser" defined at accountmanagementsystem.ads:96, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__readvitals_alt__targetuser__axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T1b" defined at accountmanagementsystem.adb:8, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__init__T1b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t1b 
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t1b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "T2b" defined at accountmanagementsystem.adb:8, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__init__T2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Array__Int

 type component_type  = 
  bool
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int
 
 type t2b  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Boolean.to_int, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq
 
 clone export "ada__model".Standard_Array_Logical_Op_Axioms with
 type map = Array__Int.map component_type, 
 function get = Array__Int.get, 
 function xorb = Array__Int.xorb, 
 function andb = Array__Int.andb, 
 function orb = Array__Int.orb, 
 function notb = Array__Int.notb, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one

end

(* Module for axiomatizing type "T3b" defined at accountmanagementsystem.adb:9, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__init__T3b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t3b 
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t3b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "T4b" defined at accountmanagementsystem.adb:9, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__init__T4b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__userid

 type component_type  = 
  Measures__userid.userid
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int
 
 type t4b  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Measures__userid.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "T5b" defined at accountmanagementsystem.adb:10, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__init__T5b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t5b 
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t5b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "T6b" defined at accountmanagementsystem.adb:10, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__init__T6b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__userid

 type component_type  = 
  Measures__userid.userid
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int
 
 type t6b  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Measures__userid.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "T7b" defined at accountmanagementsystem.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__init__T7b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t7b 
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t7b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "T8b" defined at accountmanagementsystem.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__init__T8b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__bpm

 type component_type  = 
  Measures__bpm.bpm
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int
 
 type t8b  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Measures__bpm.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "T9b" defined at accountmanagementsystem.adb:12, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__init__T9b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t9b 
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t9b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "T10b" defined at accountmanagementsystem.adb:12, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__init__T10b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__footsteps

 type component_type  = 
  Measures__footsteps.footsteps
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int
 
 type t10b  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Measures__footsteps.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "T11b" defined at accountmanagementsystem.adb:13, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__init__T11b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t11b 
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t11b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "T12b" defined at accountmanagementsystem.adb:13, created in Gnat2Why.Types.Translate_Type *)
module Accountmanagementsystem__init__T12b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__gpslocation

 type component_type  = 
  Measures__gpslocation.gpslocation
 
 function first 
   :int =
  ( -1 )
 
 function last 
   :int =
  100
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int
 
 type t12b  = 
  __t

end
(* Module for defining a ref holding the value of variable "users" defined at accountmanagementsystem.ads:25, created in Gnat2Why.Decls.Translate_Variable *)
module Accountmanagementsystem__users
 use import "_gnatprove_standard".Main
 use        Accountmanagementsystem__usersarray

 val users  : ref Accountmanagementsystem__usersarray.usersarray
 
 function attr__ATTRIBUTE_ADDRESS 
   :int

end

(* Module giving an empty axiom for the entity "users" defined at accountmanagementsystem.ads:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__users__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "latestuser" defined at accountmanagementsystem.ads:26, created in Gnat2Why.Decls.Translate_Variable *)
module Accountmanagementsystem__latestuser
 use import "_gnatprove_standard".Main
 use        Measures__userid

 val latestuser "GP_CE_Relevant"  : ref Measures__userid.__split
 
 function attr__ATTRIBUTE_ADDRESS "GP_CE_Relevant" 
   :int

end

(* Module giving an empty axiom for the entity "latestuser" defined at accountmanagementsystem.ads:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__latestuser__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "insurers" defined at accountmanagementsystem.ads:29, created in Gnat2Why.Decls.Translate_Variable *)
module Accountmanagementsystem__insurers
 use import "_gnatprove_standard".Main
 use        Accountmanagementsystem__useruserarray

 val insurers  : ref Accountmanagementsystem__useruserarray.useruserarray
 
 function attr__ATTRIBUTE_ADDRESS 
   :int

end

(* Module giving an empty axiom for the entity "insurers" defined at accountmanagementsystem.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__insurers__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "friends" defined at accountmanagementsystem.ads:30, created in Gnat2Why.Decls.Translate_Variable *)
module Accountmanagementsystem__friends
 use import "_gnatprove_standard".Main
 use        Accountmanagementsystem__useruserarray

 val friends  : ref Accountmanagementsystem__useruserarray.useruserarray
 
 function attr__ATTRIBUTE_ADDRESS 
   :int

end

(* Module giving an empty axiom for the entity "friends" defined at accountmanagementsystem.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__friends__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "vitals" defined at accountmanagementsystem.ads:33, created in Gnat2Why.Decls.Translate_Variable *)
module Accountmanagementsystem__vitals
 use import "_gnatprove_standard".Main
 use        Accountmanagementsystem__vitalsarray

 val vitals  : ref Accountmanagementsystem__vitalsarray.vitalsarray
 
 function attr__ATTRIBUTE_ADDRESS 
   :int

end

(* Module giving an empty axiom for the entity "vitals" defined at accountmanagementsystem.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__vitals__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "mfootsteps" defined at accountmanagementsystem.ads:34, created in Gnat2Why.Decls.Translate_Variable *)
module Accountmanagementsystem__mfootsteps
 use import "_gnatprove_standard".Main
 use        Accountmanagementsystem__footstepsarray

 val mfootsteps  : ref Accountmanagementsystem__footstepsarray.footstepsarray
 
 function attr__ATTRIBUTE_ADDRESS 
   :int

end

(* Module giving an empty axiom for the entity "mfootsteps" defined at accountmanagementsystem.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__mfootsteps__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "locations" defined at accountmanagementsystem.ads:35, created in Gnat2Why.Decls.Translate_Variable *)
module Accountmanagementsystem__locations
 use import "_gnatprove_standard".Main
 use        Accountmanagementsystem__locationsarray

 val locations  : ref Accountmanagementsystem__locationsarray.locationsarray
 
 function attr__ATTRIBUTE_ADDRESS 
   :int

end

(* Module giving an empty axiom for the entity "locations" defined at accountmanagementsystem.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__locations__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "newuser" defined at accountmanagementsystem.ads:45, created in Gnat2Why.Decls.Translate_Variable *)
module Accountmanagementsystem__createuser__newuser
 use import "_gnatprove_standard".Main
 use        Measures__userid

 val newuser "GP_CE_Relevant"  : ref Measures__userid.__split
 
 function attr__ATTRIBUTE_ADDRESS "GP_CE_Relevant" 
   :int

end

(* Module giving an empty axiom for the entity "newuser" defined at accountmanagementsystem.ads:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Accountmanagementsystem__createuser__newuser__axiom
 use import "_gnatprove_standard".Main


end
(* Module for possibly declaring a logic function for "init" defined at accountmanagementsystem.ads:38, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Accountmanagementsystem__init
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "createuser" defined at accountmanagementsystem.ads:45, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Accountmanagementsystem__createuser
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "setinsurer" defined at accountmanagementsystem.ads:49, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Accountmanagementsystem__setinsurer
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "readinsurer" defined at accountmanagementsystem.ads:53, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Accountmanagementsystem__readinsurer
 use        Accountmanagementsystem__insurers
 use import "_gnatprove_standard".Main
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray

 function readinsurer 
   (wearer : int) (accountmanagementsystem__insurers : Accountmanagementsystem__useruserarray.useruserarray)  :Measures__userid.__split

end

(* Module for possibly declaring a logic function for "removeinsurer" defined at accountmanagementsystem.ads:56, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Accountmanagementsystem__removeinsurer
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "setfriend" defined at accountmanagementsystem.ads:60, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Accountmanagementsystem__setfriend
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "readfriend" defined at accountmanagementsystem.ads:64, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Accountmanagementsystem__readfriend
 use        Accountmanagementsystem__friends
 use import "_gnatprove_standard".Main
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray

 function readfriend 
   (wearer : int) (accountmanagementsystem__friends : Accountmanagementsystem__useruserarray.useruserarray)  :Measures__userid.__split

end

(* Module for possibly declaring a logic function for "removefriend" defined at accountmanagementsystem.ads:67, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Accountmanagementsystem__removefriend
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "updatevitals" defined at accountmanagementsystem.ads:71, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Accountmanagementsystem__updatevitals
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "updatefootsteps" defined at accountmanagementsystem.ads:75, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Accountmanagementsystem__updatefootsteps
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "updatelocation" defined at accountmanagementsystem.ads:80, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Accountmanagementsystem__updatelocation
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "readvitals" defined at accountmanagementsystem.ads:88, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Accountmanagementsystem__readvitals
 use        Accountmanagementsystem__friends
 use        Accountmanagementsystem__vitals
 use import "_gnatprove_standard".Main
 use        Measures__bpm
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__vitalsarray

 function readvitals 
   (requester : int) (targetuser : int) (accountmanagementsystem__friends : Accountmanagementsystem__useruserarray.useruserarray) (accountmanagementsystem__vitals : Accountmanagementsystem__vitalsarray.vitalsarray)  :Measures__bpm.__split

end

(* Module for possibly declaring a logic function for "readvitals_alt" defined at accountmanagementsystem.ads:96, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Accountmanagementsystem__readvitals_alt
 use        Accountmanagementsystem__friends
 use        Accountmanagementsystem__vitals
 use import "_gnatprove_standard".Main
 use        Measures__bpm
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__vitalsarray

 function readvitals_alt 
   (requester : int) (targetuser : int) (accountmanagementsystem__friends : Accountmanagementsystem__useruserarray.useruserarray) (accountmanagementsystem__vitals : Accountmanagementsystem__vitalsarray.vitalsarray)  :Measures__bpm.__split

end

(* Module for defining the value of the update attribute at accountmanagementsystem.ads:51, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp___standard__accountmanagementsystem_7
 use import "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray

 function temp___standard__accountmanagementsystem_7 
   (temp___standard__accountmanagementsystem_9 : Accountmanagementsystem__useruserarray.useruserarray) (temp___standard__accountmanagementsystem_10 : Measures__userid.__split) (temp___standard__accountmanagementsystem_11 : Measures__userid.__split)  :Accountmanagementsystem__useruserarray.useruserarray
 
 axiom def_axiom :
  (forall temp___standard__accountmanagementsystem_9  : Accountmanagementsystem__useruserarray.useruserarray.
  (forall temp___standard__accountmanagementsystem_10 temp___standard__accountmanagementsystem_11  : Measures__userid.__split [(temp___standard__accountmanagementsystem_7 temp___standard__accountmanagementsystem_9 temp___standard__accountmanagementsystem_10 temp___standard__accountmanagementsystem_11)].
   (let temp___standard__accountmanagementsystem_8 = (temp___standard__accountmanagementsystem_7 temp___standard__accountmanagementsystem_9 temp___standard__accountmanagementsystem_10 temp___standard__accountmanagementsystem_11) in (
    (forall temp___standard__accountmanagementsystem_12  : int.
     (if ((temp___standard__accountmanagementsystem_12 = temp___standard__accountmanagementsystem_10)) then (
      ((Array__Int.get temp___standard__accountmanagementsystem_8 temp___standard__accountmanagementsystem_12) = (Measures__userid.of_rep temp___standard__accountmanagementsystem_11))) else (
      ((Array__Int.get temp___standard__accountmanagementsystem_8 temp___standard__accountmanagementsystem_12) = (Array__Int.get temp___standard__accountmanagementsystem_9 temp___standard__accountmanagementsystem_12)))))))
  ))

end

(* Module giving a program function and a defining axiom for the expression function "readinsurer" defined at accountmanagementsystem.ads:53, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Accountmanagementsystem__readinsurer__axiom
 use        Accountmanagementsystem__insurers
 use import "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__insurers
 use        Accountmanagementsystem__readinsurer

 val readinsurer 
   (wearer : int)  :Measures__userid.__split
  requires { true }
  ensures { ( (result = (Accountmanagementsystem__readinsurer.readinsurer wearer !Accountmanagementsystem__insurers.insurers)) /\ (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last result) ) }

 
 axiom readinsurer__post_axiom :
  (forall wearer  : int.
  (forall accountmanagementsystem__insurers  : Accountmanagementsystem__useruserarray.useruserarray [(Accountmanagementsystem__readinsurer.readinsurer wearer accountmanagementsystem__insurers)].
   ( (Measures__userid.in_range wearer) -> (let result = (Accountmanagementsystem__readinsurer.readinsurer wearer accountmanagementsystem__insurers) in (
    (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last result)))
    )))
 
 axiom readinsurer__def_axiom :
  (forall wearer  : int.
  (forall accountmanagementsystem__insurers  : Accountmanagementsystem__useruserarray.useruserarray [(Accountmanagementsystem__readinsurer.readinsurer wearer accountmanagementsystem__insurers)].
   ( (Measures__userid.in_range wearer) -> ((Accountmanagementsystem__readinsurer.readinsurer wearer accountmanagementsystem__insurers) = (Measures__userid.to_rep (Array__Int.get accountmanagementsystem__insurers wearer))) )))

end

(* Module for defining the value of the update attribute at accountmanagementsystem.ads:58, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp___standard__accountmanagementsystem_17
 use import "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray

 function temp___standard__accountmanagementsystem_17 
   (temp___standard__accountmanagementsystem_19 : Accountmanagementsystem__useruserarray.useruserarray) (temp___standard__accountmanagementsystem_20 : Measures__userid.__split) (temp___standard__accountmanagementsystem_21 : Measures__userid.__split)  :Accountmanagementsystem__useruserarray.useruserarray
 
 axiom def_axiom :
  (forall temp___standard__accountmanagementsystem_19  : Accountmanagementsystem__useruserarray.useruserarray.
  (forall temp___standard__accountmanagementsystem_20 temp___standard__accountmanagementsystem_21  : Measures__userid.__split [(temp___standard__accountmanagementsystem_17 temp___standard__accountmanagementsystem_19 temp___standard__accountmanagementsystem_20 temp___standard__accountmanagementsystem_21)].
   (let temp___standard__accountmanagementsystem_18 = (temp___standard__accountmanagementsystem_17 temp___standard__accountmanagementsystem_19 temp___standard__accountmanagementsystem_20 temp___standard__accountmanagementsystem_21) in (
    (forall temp___standard__accountmanagementsystem_22  : int.
     (if ((temp___standard__accountmanagementsystem_22 = temp___standard__accountmanagementsystem_20)) then (
      ((Array__Int.get temp___standard__accountmanagementsystem_18 temp___standard__accountmanagementsystem_22) = (Measures__userid.of_rep temp___standard__accountmanagementsystem_21))) else (
      ((Array__Int.get temp___standard__accountmanagementsystem_18 temp___standard__accountmanagementsystem_22) = (Array__Int.get temp___standard__accountmanagementsystem_19 temp___standard__accountmanagementsystem_22)))))))
  ))

end

(* Module for defining the value of the update attribute at accountmanagementsystem.ads:62, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp___standard__accountmanagementsystem_25
 use import "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray

 function temp___standard__accountmanagementsystem_25 
   (temp___standard__accountmanagementsystem_27 : Accountmanagementsystem__useruserarray.useruserarray) (temp___standard__accountmanagementsystem_28 : Measures__userid.__split) (temp___standard__accountmanagementsystem_29 : Measures__userid.__split)  :Accountmanagementsystem__useruserarray.useruserarray
 
 axiom def_axiom :
  (forall temp___standard__accountmanagementsystem_27  : Accountmanagementsystem__useruserarray.useruserarray.
  (forall temp___standard__accountmanagementsystem_28 temp___standard__accountmanagementsystem_29  : Measures__userid.__split [(temp___standard__accountmanagementsystem_25 temp___standard__accountmanagementsystem_27 temp___standard__accountmanagementsystem_28 temp___standard__accountmanagementsystem_29)].
   (let temp___standard__accountmanagementsystem_26 = (temp___standard__accountmanagementsystem_25 temp___standard__accountmanagementsystem_27 temp___standard__accountmanagementsystem_28 temp___standard__accountmanagementsystem_29) in (
    (forall temp___standard__accountmanagementsystem_30  : int.
     (if ((temp___standard__accountmanagementsystem_30 = temp___standard__accountmanagementsystem_28)) then (
      ((Array__Int.get temp___standard__accountmanagementsystem_26 temp___standard__accountmanagementsystem_30) = (Measures__userid.of_rep temp___standard__accountmanagementsystem_29))) else (
      ((Array__Int.get temp___standard__accountmanagementsystem_26 temp___standard__accountmanagementsystem_30) = (Array__Int.get temp___standard__accountmanagementsystem_27 temp___standard__accountmanagementsystem_30)))))))
  ))

end

(* Module giving a program function and a defining axiom for the expression function "readfriend" defined at accountmanagementsystem.ads:64, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Accountmanagementsystem__readfriend__axiom
 use        Accountmanagementsystem__friends
 use import "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__friends
 use        Accountmanagementsystem__readfriend

 val readfriend 
   (wearer : int)  :Measures__userid.__split
  requires { true }
  ensures { ( (result = (Accountmanagementsystem__readfriend.readfriend wearer !Accountmanagementsystem__friends.friends)) /\ (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last result) ) }

 
 axiom readfriend__post_axiom :
  (forall wearer  : int.
  (forall accountmanagementsystem__friends  : Accountmanagementsystem__useruserarray.useruserarray [(Accountmanagementsystem__readfriend.readfriend wearer accountmanagementsystem__friends)].
   ( (Measures__userid.in_range wearer) -> (let result = (Accountmanagementsystem__readfriend.readfriend wearer accountmanagementsystem__friends) in (
    (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last result)))
    )))
 
 axiom readfriend__def_axiom :
  (forall wearer  : int.
  (forall accountmanagementsystem__friends  : Accountmanagementsystem__useruserarray.useruserarray [(Accountmanagementsystem__readfriend.readfriend wearer accountmanagementsystem__friends)].
   ( (Measures__userid.in_range wearer) -> ((Accountmanagementsystem__readfriend.readfriend wearer accountmanagementsystem__friends) = (Measures__userid.to_rep (Array__Int.get accountmanagementsystem__friends wearer))) )))

end

(* Module for defining the value of the update attribute at accountmanagementsystem.ads:69, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp___standard__accountmanagementsystem_35
 use import "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray

 function temp___standard__accountmanagementsystem_35 
   (temp___standard__accountmanagementsystem_37 : Accountmanagementsystem__useruserarray.useruserarray) (temp___standard__accountmanagementsystem_38 : Measures__userid.__split) (temp___standard__accountmanagementsystem_39 : Measures__userid.__split)  :Accountmanagementsystem__useruserarray.useruserarray
 
 axiom def_axiom :
  (forall temp___standard__accountmanagementsystem_37  : Accountmanagementsystem__useruserarray.useruserarray.
  (forall temp___standard__accountmanagementsystem_38 temp___standard__accountmanagementsystem_39  : Measures__userid.__split [(temp___standard__accountmanagementsystem_35 temp___standard__accountmanagementsystem_37 temp___standard__accountmanagementsystem_38 temp___standard__accountmanagementsystem_39)].
   (let temp___standard__accountmanagementsystem_36 = (temp___standard__accountmanagementsystem_35 temp___standard__accountmanagementsystem_37 temp___standard__accountmanagementsystem_38 temp___standard__accountmanagementsystem_39) in (
    (forall temp___standard__accountmanagementsystem_40  : int.
     (if ((temp___standard__accountmanagementsystem_40 = temp___standard__accountmanagementsystem_38)) then (
      ((Array__Int.get temp___standard__accountmanagementsystem_36 temp___standard__accountmanagementsystem_40) = (Measures__userid.of_rep temp___standard__accountmanagementsystem_39))) else (
      ((Array__Int.get temp___standard__accountmanagementsystem_36 temp___standard__accountmanagementsystem_40) = (Array__Int.get temp___standard__accountmanagementsystem_37 temp___standard__accountmanagementsystem_40)))))))
  ))

end

(* Module for defining the value of the update attribute at accountmanagementsystem.ads:73, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp___standard__accountmanagementsystem_43
 use import "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__userid
 use        Measures__bpm
 use        Accountmanagementsystem__vitalsarray

 function temp___standard__accountmanagementsystem_43 
   (temp___standard__accountmanagementsystem_45 : Accountmanagementsystem__vitalsarray.vitalsarray) (temp___standard__accountmanagementsystem_46 : Measures__userid.__split) (temp___standard__accountmanagementsystem_47 : Measures__bpm.__split)  :Accountmanagementsystem__vitalsarray.vitalsarray
 
 axiom def_axiom :
  (forall temp___standard__accountmanagementsystem_45  : Accountmanagementsystem__vitalsarray.vitalsarray.
  (forall temp___standard__accountmanagementsystem_46  : Measures__userid.__split.
  (forall temp___standard__accountmanagementsystem_47  : Measures__bpm.__split [(temp___standard__accountmanagementsystem_43 temp___standard__accountmanagementsystem_45 temp___standard__accountmanagementsystem_46 temp___standard__accountmanagementsystem_47)].
   (let temp___standard__accountmanagementsystem_44 = (temp___standard__accountmanagementsystem_43 temp___standard__accountmanagementsystem_45 temp___standard__accountmanagementsystem_46 temp___standard__accountmanagementsystem_47) in (
    (forall temp___standard__accountmanagementsystem_48  : int.
     (if ((temp___standard__accountmanagementsystem_48 = temp___standard__accountmanagementsystem_46)) then (
      ((Array__Int.get temp___standard__accountmanagementsystem_44 temp___standard__accountmanagementsystem_48) = (Measures__bpm.of_rep temp___standard__accountmanagementsystem_47))) else (
      ((Array__Int.get temp___standard__accountmanagementsystem_44 temp___standard__accountmanagementsystem_48) = (Array__Int.get temp___standard__accountmanagementsystem_45 temp___standard__accountmanagementsystem_48)))))))
  )))

end

(* Module for defining the value of the update attribute at accountmanagementsystem.ads:78, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp___standard__accountmanagementsystem_51
 use import "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__userid
 use        Measures__footsteps
 use        Accountmanagementsystem__footstepsarray

 function temp___standard__accountmanagementsystem_51 
   (temp___standard__accountmanagementsystem_53 : Accountmanagementsystem__footstepsarray.footstepsarray) (temp___standard__accountmanagementsystem_54 : Measures__userid.__split) (temp___standard__accountmanagementsystem_55 : Measures__footsteps.__split)  :Accountmanagementsystem__footstepsarray.footstepsarray
 
 axiom def_axiom :
  (forall temp___standard__accountmanagementsystem_53  : Accountmanagementsystem__footstepsarray.footstepsarray.
  (forall temp___standard__accountmanagementsystem_54  : Measures__userid.__split.
  (forall temp___standard__accountmanagementsystem_55  : Measures__footsteps.__split [(temp___standard__accountmanagementsystem_51 temp___standard__accountmanagementsystem_53 temp___standard__accountmanagementsystem_54 temp___standard__accountmanagementsystem_55)].
   (let temp___standard__accountmanagementsystem_52 = (temp___standard__accountmanagementsystem_51 temp___standard__accountmanagementsystem_53 temp___standard__accountmanagementsystem_54 temp___standard__accountmanagementsystem_55) in (
    (forall temp___standard__accountmanagementsystem_56  : int.
     (if ((temp___standard__accountmanagementsystem_56 = temp___standard__accountmanagementsystem_54)) then (
      ((Array__Int.get temp___standard__accountmanagementsystem_52 temp___standard__accountmanagementsystem_56) = (Measures__footsteps.of_rep temp___standard__accountmanagementsystem_55))) else (
      ((Array__Int.get temp___standard__accountmanagementsystem_52 temp___standard__accountmanagementsystem_56) = (Array__Int.get temp___standard__accountmanagementsystem_53 temp___standard__accountmanagementsystem_56)))))))
  )))

end

(* Module for defining the value of the update attribute at accountmanagementsystem.ads:83, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp___standard__accountmanagementsystem_59
 use import "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__userid
 use        Measures__gpslocation
 use        Accountmanagementsystem__locationsarray

 function temp___standard__accountmanagementsystem_59 
   (temp___standard__accountmanagementsystem_61 : Accountmanagementsystem__locationsarray.locationsarray) (temp___standard__accountmanagementsystem_62 : Measures__userid.__split) (temp___standard__accountmanagementsystem_63 : Measures__gpslocation.gpslocation)  :Accountmanagementsystem__locationsarray.locationsarray
 
 axiom def_axiom :
  (forall temp___standard__accountmanagementsystem_61  : Accountmanagementsystem__locationsarray.locationsarray.
  (forall temp___standard__accountmanagementsystem_62  : Measures__userid.__split.
  (forall temp___standard__accountmanagementsystem_63  : Measures__gpslocation.gpslocation [(temp___standard__accountmanagementsystem_59 temp___standard__accountmanagementsystem_61 temp___standard__accountmanagementsystem_62 temp___standard__accountmanagementsystem_63)].
   (let temp___standard__accountmanagementsystem_60 = (temp___standard__accountmanagementsystem_59 temp___standard__accountmanagementsystem_61 temp___standard__accountmanagementsystem_62 temp___standard__accountmanagementsystem_63) in (
    (forall temp___standard__accountmanagementsystem_64  : int.
     (if ((temp___standard__accountmanagementsystem_64 = temp___standard__accountmanagementsystem_62)) then (
      ((Array__Int.get temp___standard__accountmanagementsystem_60 temp___standard__accountmanagementsystem_64) = temp___standard__accountmanagementsystem_63)) else (
      ((Array__Int.get temp___standard__accountmanagementsystem_60 temp___standard__accountmanagementsystem_64) = (Array__Int.get temp___standard__accountmanagementsystem_61 temp___standard__accountmanagementsystem_64)))))))
  )))

end

(* Module giving a program function and a defining axiom for the expression function "readvitals" defined at accountmanagementsystem.ads:88, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Accountmanagementsystem__readvitals__axiom
 use        Accountmanagementsystem__friends
 use        Accountmanagementsystem__vitals
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__userid
 use        Measures__bpm
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__vitalsarray
 use        Accountmanagementsystem__friends
 use        Accountmanagementsystem__vitals
 use        Accountmanagementsystem__readvitals

 val readvitals 
   (requester : int) (targetuser : int)  :Measures__bpm.__split
  requires { true }
  ensures { ( (result = (Accountmanagementsystem__readvitals.readvitals requester targetuser !Accountmanagementsystem__friends.friends !Accountmanagementsystem__vitals.vitals)) /\ (Measures__bpm.dynamic_property Measures__bpm.first Measures__bpm.last result) ) }

 
 axiom readvitals__post_axiom :
  (forall requester targetuser  : int.
  (forall accountmanagementsystem__friends  : Accountmanagementsystem__useruserarray.useruserarray.
  (forall accountmanagementsystem__vitals  : Accountmanagementsystem__vitalsarray.vitalsarray [(Accountmanagementsystem__readvitals.readvitals requester targetuser accountmanagementsystem__friends accountmanagementsystem__vitals)].
   ( ( (Measures__userid.in_range requester) /\ (Measures__userid.in_range targetuser) ) -> (let result = (Accountmanagementsystem__readvitals.readvitals requester targetuser accountmanagementsystem__friends accountmanagementsystem__vitals) in (
    (Measures__bpm.dynamic_property Measures__bpm.first Measures__bpm.last result)))
    ))))
 
 axiom readvitals__def_axiom :
  (forall requester targetuser  : int.
  (forall accountmanagementsystem__friends  : Accountmanagementsystem__useruserarray.useruserarray.
  (forall accountmanagementsystem__vitals  : Accountmanagementsystem__vitalsarray.vitalsarray [(Accountmanagementsystem__readvitals.readvitals requester targetuser accountmanagementsystem__friends accountmanagementsystem__vitals)].
   ( ( (Measures__userid.in_range requester) /\ (Measures__userid.in_range targetuser) ) -> ((Accountmanagementsystem__readvitals.readvitals requester targetuser accountmanagementsystem__friends accountmanagementsystem__vitals) = (if (((Measures__userid.to_rep (Array__Int.get accountmanagementsystem__friends targetuser)) = requester)) then (
    (Measures__bpm.to_rep (Array__Int.get accountmanagementsystem__vitals targetuser))) else (
    ( -1 )))) ))))

end

(* Module for defining the value of the aggregate at accountmanagementsystem.adb:8, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp___standard__accountmanagementsystem_94
 use import "_gnatprove_standard".Main
 use        Array__Int
 use        Accountmanagementsystem__init__T2b

 function temp___standard__accountmanagementsystem_94 
   (temp___standard__accountmanagementsystem_96 : bool)  :Accountmanagementsystem__init__T2b.t2b
 
 axiom def_axiom :
  (forall temp___standard__accountmanagementsystem_96  : bool [(temp___standard__accountmanagementsystem_94 temp___standard__accountmanagementsystem_96)].
   (let temp___standard__accountmanagementsystem_95 = (temp___standard__accountmanagementsystem_94 temp___standard__accountmanagementsystem_96) in (
    (forall temp___standard__accountmanagementsystem_97  : int.
     ((Array__Int.get temp___standard__accountmanagementsystem_95 temp___standard__accountmanagementsystem_97) = temp___standard__accountmanagementsystem_96))))
  )

end

(* Module for defining the value of the aggregate at accountmanagementsystem.adb:9, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp___standard__accountmanagementsystem_98
 use import "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__init__T4b

 function temp___standard__accountmanagementsystem_98 
   (temp___standard__accountmanagementsystem_100 : Measures__userid.__split)  :Accountmanagementsystem__init__T4b.t4b
 
 axiom def_axiom :
  (forall temp___standard__accountmanagementsystem_100  : Measures__userid.__split [(temp___standard__accountmanagementsystem_98 temp___standard__accountmanagementsystem_100)].
   (let temp___standard__accountmanagementsystem_99 = (temp___standard__accountmanagementsystem_98 temp___standard__accountmanagementsystem_100) in (
    (forall temp___standard__accountmanagementsystem_101  : int.
     ((Array__Int.get temp___standard__accountmanagementsystem_99 temp___standard__accountmanagementsystem_101) = (Measures__userid.of_rep temp___standard__accountmanagementsystem_100)))))
  )

end

(* Module for defining the value of the aggregate at accountmanagementsystem.adb:10, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp___standard__accountmanagementsystem_102
 use import "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__init__T6b

 function temp___standard__accountmanagementsystem_102 
   (temp___standard__accountmanagementsystem_104 : Measures__userid.__split)  :Accountmanagementsystem__init__T6b.t6b
 
 axiom def_axiom :
  (forall temp___standard__accountmanagementsystem_104  : Measures__userid.__split [(temp___standard__accountmanagementsystem_102 temp___standard__accountmanagementsystem_104)].
   (let temp___standard__accountmanagementsystem_103 = (temp___standard__accountmanagementsystem_102 temp___standard__accountmanagementsystem_104) in (
    (forall temp___standard__accountmanagementsystem_105  : int.
     ((Array__Int.get temp___standard__accountmanagementsystem_103 temp___standard__accountmanagementsystem_105) = (Measures__userid.of_rep temp___standard__accountmanagementsystem_104)))))
  )

end

(* Module for defining the value of the aggregate at accountmanagementsystem.adb:11, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp___standard__accountmanagementsystem_106
 use import "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__bpm
 use        Accountmanagementsystem__init__T8b

 function temp___standard__accountmanagementsystem_106 
   (temp___standard__accountmanagementsystem_108 : Measures__bpm.__split)  :Accountmanagementsystem__init__T8b.t8b
 
 axiom def_axiom :
  (forall temp___standard__accountmanagementsystem_108  : Measures__bpm.__split [(temp___standard__accountmanagementsystem_106 temp___standard__accountmanagementsystem_108)].
   (let temp___standard__accountmanagementsystem_107 = (temp___standard__accountmanagementsystem_106 temp___standard__accountmanagementsystem_108) in (
    (forall temp___standard__accountmanagementsystem_109  : int.
     ((Array__Int.get temp___standard__accountmanagementsystem_107 temp___standard__accountmanagementsystem_109) = (Measures__bpm.of_rep temp___standard__accountmanagementsystem_108)))))
  )

end

(* Module for defining the value of the aggregate at accountmanagementsystem.adb:12, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp___standard__accountmanagementsystem_110
 use import "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__footsteps
 use        Accountmanagementsystem__init__T10b

 function temp___standard__accountmanagementsystem_110 
   (temp___standard__accountmanagementsystem_112 : Measures__footsteps.__split)  :Accountmanagementsystem__init__T10b.t10b
 
 axiom def_axiom :
  (forall temp___standard__accountmanagementsystem_112  : Measures__footsteps.__split [(temp___standard__accountmanagementsystem_110 temp___standard__accountmanagementsystem_112)].
   (let temp___standard__accountmanagementsystem_111 = (temp___standard__accountmanagementsystem_110 temp___standard__accountmanagementsystem_112) in (
    (forall temp___standard__accountmanagementsystem_113  : int.
     ((Array__Int.get temp___standard__accountmanagementsystem_111 temp___standard__accountmanagementsystem_113) = (Measures__footsteps.of_rep temp___standard__accountmanagementsystem_112)))))
  )

end

(* Module for defining the value of the aggregate at accountmanagementsystem.adb:13, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp___standard__accountmanagementsystem_114
 use import "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__gpslocation
 use        Accountmanagementsystem__init__T12b

 function temp___standard__accountmanagementsystem_114 
   (temp___standard__accountmanagementsystem_116 : Measures__gpslocation.gpslocation)  :Accountmanagementsystem__init__T12b.t12b
 
 axiom def_axiom :
  (forall temp___standard__accountmanagementsystem_116  : Measures__gpslocation.gpslocation [(temp___standard__accountmanagementsystem_114 temp___standard__accountmanagementsystem_116)].
   (let temp___standard__accountmanagementsystem_115 = (temp___standard__accountmanagementsystem_114 temp___standard__accountmanagementsystem_116) in (
    (forall temp___standard__accountmanagementsystem_117  : int.
     ((Array__Int.get temp___standard__accountmanagementsystem_115 temp___standard__accountmanagementsystem_117) = temp___standard__accountmanagementsystem_116))))
  )

end
(* Module giving axioms for the type entity "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "long_long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_float__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "universal_real", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_real__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "max_userid" defined at measures.ads:7, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Measures__max_userid__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Measures__max_userid

 axiom max_userid__def_axiom :
  ((Measures__max_userid.max_userid ) = 100)

end

(* Module giving axioms for the type entity "TuseridB" defined at measures.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Measures__TuseridB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "userid" defined at measures.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Measures__userid__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "max_bpm" defined at measures.ads:11, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Measures__max_bpm__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Measures__max_bpm

 axiom max_bpm__def_axiom :
  ((Measures__max_bpm.max_bpm ) = 300)

end

(* Module giving axioms for the type entity "TbpmB" defined at measures.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Measures__TbpmB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "bpm" defined at measures.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Measures__bpm__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "max_footsteps" defined at measures.ads:15, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Measures__max_footsteps__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Measures__max_footsteps

 axiom max_footsteps__def_axiom :
  ((Measures__max_footsteps.max_footsteps ) = 100000)

end

(* Module giving axioms for the type entity "TfootstepsB" defined at measures.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Measures__TfootstepsB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "footsteps" defined at measures.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Measures__footsteps__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "TlatitudeB" defined at measures.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Measures__TlatitudeB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "latitude" defined at measures.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Measures__latitude__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "TlongitudeB" defined at measures.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Measures__TlongitudeB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "longitude" defined at measures.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Measures__longitude__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "gpslocation" defined at measures.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Measures__gpslocation__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "TusersarrayB" defined at accountmanagementsystem.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__TusersarrayB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "usersarray" defined at accountmanagementsystem.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__usersarray__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "TuseruserarrayB" defined at accountmanagementsystem.ads:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__TuseruserarrayB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "useruserarray" defined at accountmanagementsystem.ads:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__useruserarray__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "TvitalsarrayB" defined at accountmanagementsystem.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__TvitalsarrayB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "vitalsarray" defined at accountmanagementsystem.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__vitalsarray__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "TfootstepsarrayB" defined at accountmanagementsystem.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__TfootstepsarrayB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "footstepsarray" defined at accountmanagementsystem.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__footstepsarray__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "TlocationsarrayB" defined at accountmanagementsystem.ads:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__TlocationsarrayB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "locationsarray" defined at accountmanagementsystem.ads:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__locationsarray__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T33s" defined at accountmanagementsystem.ads:39, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__init__L32s__T33s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T35s" defined at accountmanagementsystem.ads:40, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__init__L34s__T35s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T37s" defined at accountmanagementsystem.ads:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__init__L36s__T37s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T39s" defined at accountmanagementsystem.ads:42, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__init__L38s__T39s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T41s" defined at accountmanagementsystem.ads:43, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__init__L40s__T41s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T1b" defined at accountmanagementsystem.adb:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__init__T1b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T2b" defined at accountmanagementsystem.adb:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__init__T2b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T3b" defined at accountmanagementsystem.adb:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__init__T3b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T4b" defined at accountmanagementsystem.adb:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__init__T4b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T5b" defined at accountmanagementsystem.adb:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__init__T5b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T6b" defined at accountmanagementsystem.adb:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__init__T6b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T7b" defined at accountmanagementsystem.adb:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__init__T7b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T8b" defined at accountmanagementsystem.adb:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__init__T8b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T9b" defined at accountmanagementsystem.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__init__T9b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T10b" defined at accountmanagementsystem.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__init__T10b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T11b" defined at accountmanagementsystem.adb:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__init__T11b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T12b" defined at accountmanagementsystem.adb:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Accountmanagementsystem__init__T12b__axiom
 use import "_gnatprove_standard".Main


end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at accountmanagementsystem.ads:38, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Accountmanagementsystem__init__axiom
 use        Accountmanagementsystem__users
 use        Accountmanagementsystem__insurers
 use        Accountmanagementsystem__friends
 use        Accountmanagementsystem__vitals
 use        Accountmanagementsystem__mfootsteps
 use        Accountmanagementsystem__locations
 use import "_gnatprove_standard".Main
 use import "int".Int
 use import "real".RealInfix
 use        Array__Int
 use        Measures__userid
 use        Measures__bpm
 use        Measures__footsteps
 use        Measures__latitude
 use        Measures__longitude
 use        Measures__gpslocation
 use        Accountmanagementsystem__usersarray
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__vitalsarray
 use        Accountmanagementsystem__footstepsarray
 use        Accountmanagementsystem__locationsarray
 use        Accountmanagementsystem__users
 use        Accountmanagementsystem__insurers
 use        Accountmanagementsystem__friends
 use        Accountmanagementsystem__vitals
 use        Accountmanagementsystem__mfootsteps
 use        Accountmanagementsystem__locations

 val init 
   (__void_param : unit)  :unit
  requires { true }
  ensures { ( ( ( ( (forall i  : int.
   ( ( (( -1 ) <= i) /\ (i <= 100) ) -> ( ((Array__Int.get !Accountmanagementsystem__users.users i) = True) <-> false ) )) /\ (forall i  : int.
   ( ( (( -1 ) <= i) /\ (i <= 100) ) -> ((Measures__userid.to_rep (Array__Int.get !Accountmanagementsystem__friends.friends i)) = ( -1 )) )) ) /\ (forall i  : int.
   ( ( (( -1 ) <= i) /\ (i <= 100) ) -> ((Measures__bpm.to_rep (Array__Int.get !Accountmanagementsystem__vitals.vitals i)) = ( -1 )) )) ) /\ (forall i  : int.
   ( ( (( -1 ) <= i) /\ (i <= 100) ) -> ((Measures__footsteps.to_rep (Array__Int.get !Accountmanagementsystem__mfootsteps.mfootsteps i)) = 0) )) ) /\ (forall i  : int.
   ( ( (( -1 ) <= i) /\ (i <= 100) ) -> ((Measures__gpslocation.bool_eq (Array__Int.get !Accountmanagementsystem__locations.locations i) { Measures__gpslocation.__split_fields = { Measures__gpslocation.rec__lat = (Measures__latitude.of_real (0.0E-1)); Measures__gpslocation.rec__long = (Measures__longitude.of_real (0.0E-1)) } }) = True) )) ) }
  writes {Accountmanagementsystem__users.users, Accountmanagementsystem__insurers.insurers, Accountmanagementsystem__friends.friends, Accountmanagementsystem__vitals.vitals, Accountmanagementsystem__mfootsteps.mfootsteps, Accountmanagementsystem__locations.locations }


end

(* Module for declaring a program function (and possibly an axiom) for "createuser" defined at accountmanagementsystem.ads:45, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Accountmanagementsystem__createuser__axiom
 use        Accountmanagementsystem__users
 use        Accountmanagementsystem__latestuser
 use        Accountmanagementsystem__users
 use        Accountmanagementsystem__latestuser
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__usersarray
 use        Accountmanagementsystem__users
 use        Accountmanagementsystem__latestuser

 val createuser 
   (newuser : ref Measures__userid.__split)  :unit
  requires { (!Accountmanagementsystem__latestuser.latestuser < 100) }
  ensures { ( ( ((Array__Int.get !Accountmanagementsystem__users.users !newuser) = True) <-> true ) /\ ( (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last !newuser) /\ (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last !Accountmanagementsystem__latestuser.latestuser) ) ) }
  reads {Accountmanagementsystem__users.users, Accountmanagementsystem__latestuser.latestuser }
  writes {Accountmanagementsystem__users.users, Accountmanagementsystem__latestuser.latestuser, newuser }


end

(* Module for declaring a program function (and possibly an axiom) for "setinsurer" defined at accountmanagementsystem.ads:49, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Accountmanagementsystem__setinsurer__axiom
 use        Accountmanagementsystem__insurers
 use        Accountmanagementsystem__insurers
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__insurers
 use        Temp___standard__accountmanagementsystem_7

 val setinsurer 
   (wearer : int) (insurer : int)  :unit
  requires { ( ( (( -1 ) <= wearer) /\ (wearer <= 100) ) /\ ( (( -1 ) <= insurer) /\ (insurer <= 100) ) ) }
  ensures { ((let temp___standard__accountmanagementsystem_13 = (Temp___standard__accountmanagementsystem_7.temp___standard__accountmanagementsystem_7 (old !Accountmanagementsystem__insurers.insurers ) wearer insurer) in (
   (Array__Int.bool_eq !Accountmanagementsystem__insurers.insurers Measures__userid.first Measures__userid.last temp___standard__accountmanagementsystem_13 Measures__userid.first Measures__userid.last)))
   = True) }
  reads {Accountmanagementsystem__insurers.insurers }
  writes {Accountmanagementsystem__insurers.insurers }


end

(* Module for declaring a program function (and possibly an axiom) for "removeinsurer" defined at accountmanagementsystem.ads:56, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Accountmanagementsystem__removeinsurer__axiom
 use        Accountmanagementsystem__insurers
 use        Accountmanagementsystem__insurers
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__insurers
 use        Temp___standard__accountmanagementsystem_17

 val removeinsurer 
   (wearer : int)  :unit
  requires { ((Measures__userid.to_rep (Array__Int.get !Accountmanagementsystem__insurers.insurers wearer)) <> ( -1 )) }
  ensures { ((let temp___standard__accountmanagementsystem_23 = (Temp___standard__accountmanagementsystem_17.temp___standard__accountmanagementsystem_17 (old !Accountmanagementsystem__insurers.insurers ) wearer ( -1 )) in (
   (Array__Int.bool_eq !Accountmanagementsystem__insurers.insurers Measures__userid.first Measures__userid.last temp___standard__accountmanagementsystem_23 Measures__userid.first Measures__userid.last)))
   = True) }
  reads {Accountmanagementsystem__insurers.insurers }
  writes {Accountmanagementsystem__insurers.insurers }


end

(* Module for declaring a program function (and possibly an axiom) for "setfriend" defined at accountmanagementsystem.ads:60, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Accountmanagementsystem__setfriend__axiom
 use        Accountmanagementsystem__friends
 use        Accountmanagementsystem__friends
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__friends
 use        Temp___standard__accountmanagementsystem_25

 val setfriend 
   (wearer : int) (friend : int)  :unit
  requires { ( ( (( -1 ) <= wearer) /\ (wearer <= 100) ) /\ ( (( -1 ) <= friend) /\ (friend <= 100) ) ) }
  ensures { ((let temp___standard__accountmanagementsystem_31 = (Temp___standard__accountmanagementsystem_25.temp___standard__accountmanagementsystem_25 (old !Accountmanagementsystem__friends.friends ) wearer friend) in (
   (Array__Int.bool_eq !Accountmanagementsystem__friends.friends Measures__userid.first Measures__userid.last temp___standard__accountmanagementsystem_31 Measures__userid.first Measures__userid.last)))
   = True) }
  reads {Accountmanagementsystem__friends.friends }
  writes {Accountmanagementsystem__friends.friends }


end

(* Module for declaring a program function (and possibly an axiom) for "removefriend" defined at accountmanagementsystem.ads:67, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Accountmanagementsystem__removefriend__axiom
 use        Accountmanagementsystem__friends
 use        Accountmanagementsystem__friends
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__friends
 use        Temp___standard__accountmanagementsystem_35

 val removefriend 
   (wearer : int)  :unit
  requires { ((Measures__userid.to_rep (Array__Int.get !Accountmanagementsystem__friends.friends wearer)) <> ( -1 )) }
  ensures { ((let temp___standard__accountmanagementsystem_41 = (Temp___standard__accountmanagementsystem_35.temp___standard__accountmanagementsystem_35 (old !Accountmanagementsystem__friends.friends ) wearer ( -1 )) in (
   (Array__Int.bool_eq !Accountmanagementsystem__friends.friends Measures__userid.first Measures__userid.last temp___standard__accountmanagementsystem_41 Measures__userid.first Measures__userid.last)))
   = True) }
  reads {Accountmanagementsystem__friends.friends }
  writes {Accountmanagementsystem__friends.friends }


end

(* Module for declaring a program function (and possibly an axiom) for "updatevitals" defined at accountmanagementsystem.ads:71, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Accountmanagementsystem__updatevitals__axiom
 use        Accountmanagementsystem__vitals
 use        Accountmanagementsystem__vitals
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__vitalsarray
 use        Accountmanagementsystem__vitals
 use        Temp___standard__accountmanagementsystem_43

 val updatevitals 
   (wearer : int) (newvitals : int)  :unit
  requires { ( (( -1 ) <= wearer) /\ (wearer <= 100) ) }
  ensures { ((let temp___standard__accountmanagementsystem_49 = (Temp___standard__accountmanagementsystem_43.temp___standard__accountmanagementsystem_43 (old !Accountmanagementsystem__vitals.vitals ) wearer newvitals) in (
   (Array__Int.bool_eq !Accountmanagementsystem__vitals.vitals Measures__userid.first Measures__userid.last temp___standard__accountmanagementsystem_49 Measures__userid.first Measures__userid.last)))
   = True) }
  reads {Accountmanagementsystem__vitals.vitals }
  writes {Accountmanagementsystem__vitals.vitals }


end

(* Module for declaring a program function (and possibly an axiom) for "updatefootsteps" defined at accountmanagementsystem.ads:75, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Accountmanagementsystem__updatefootsteps__axiom
 use        Accountmanagementsystem__mfootsteps
 use        Accountmanagementsystem__mfootsteps
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__footstepsarray
 use        Accountmanagementsystem__mfootsteps
 use        Temp___standard__accountmanagementsystem_51

 val updatefootsteps 
   (wearer : int) (newfootsteps : int)  :unit
  requires { ( (( -1 ) <= wearer) /\ (wearer <= 100) ) }
  ensures { ((let temp___standard__accountmanagementsystem_57 = (Temp___standard__accountmanagementsystem_51.temp___standard__accountmanagementsystem_51 (old !Accountmanagementsystem__mfootsteps.mfootsteps ) wearer newfootsteps) in (
   (Array__Int.bool_eq !Accountmanagementsystem__mfootsteps.mfootsteps Measures__userid.first Measures__userid.last temp___standard__accountmanagementsystem_57 Measures__userid.first Measures__userid.last)))
   = True) }
  reads {Accountmanagementsystem__mfootsteps.mfootsteps }
  writes {Accountmanagementsystem__mfootsteps.mfootsteps }


end

(* Module for declaring a program function (and possibly an axiom) for "updatelocation" defined at accountmanagementsystem.ads:80, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Accountmanagementsystem__updatelocation__axiom
 use        Accountmanagementsystem__locations
 use        Accountmanagementsystem__locations
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__userid
 use        Measures__gpslocation
 use        Accountmanagementsystem__locationsarray
 use        Accountmanagementsystem__locations
 use        Temp___standard__accountmanagementsystem_59

 val updatelocation 
   (wearer : int) (newlocation : Measures__gpslocation.gpslocation)  :unit
  requires { ( (( -1 ) <= wearer) /\ (wearer <= 100) ) }
  ensures { ((let temp___standard__accountmanagementsystem_65 = (Temp___standard__accountmanagementsystem_59.temp___standard__accountmanagementsystem_59 (old !Accountmanagementsystem__locations.locations ) wearer newlocation) in (
   (Array__Int.bool_eq !Accountmanagementsystem__locations.locations Measures__userid.first Measures__userid.last temp___standard__accountmanagementsystem_65 Measures__userid.first Measures__userid.last)))
   = True) }
  reads {Accountmanagementsystem__locations.locations }
  writes {Accountmanagementsystem__locations.locations }


end

(* Module for declaring a program function (and possibly an axiom) for "readvitals_alt" defined at accountmanagementsystem.ads:96, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Accountmanagementsystem__readvitals_alt__axiom
 use        Accountmanagementsystem__friends
 use        Accountmanagementsystem__vitals
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Measures__userid
 use        Measures__bpm
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__vitalsarray
 use        Accountmanagementsystem__friends
 use        Accountmanagementsystem__vitals
 use        Accountmanagementsystem__readvitals_alt

 val readvitals_alt 
   (requester : int) (targetuser : int)  :Measures__bpm.__split
  requires { true }
  ensures { ( (result = (Accountmanagementsystem__readvitals_alt.readvitals_alt requester targetuser !Accountmanagementsystem__friends.friends !Accountmanagementsystem__vitals.vitals)) /\ ( (Measures__bpm.dynamic_property Measures__bpm.first Measures__bpm.last result) /\ (result = (if (((Measures__userid.to_rep (Array__Int.get !Accountmanagementsystem__friends.friends targetuser)) = requester)) then (
   (Measures__bpm.to_rep (Array__Int.get !Accountmanagementsystem__vitals.vitals targetuser))) else (
   ( -1 )))) ) ) }

 
 axiom readvitals_alt__post_axiom :
  (forall requester targetuser  : int.
  (forall accountmanagementsystem__friends  : Accountmanagementsystem__useruserarray.useruserarray.
  (forall accountmanagementsystem__vitals  : Accountmanagementsystem__vitalsarray.vitalsarray [(Accountmanagementsystem__readvitals_alt.readvitals_alt requester targetuser accountmanagementsystem__friends accountmanagementsystem__vitals)].
   ( ( (Measures__userid.in_range requester) /\ (Measures__userid.in_range targetuser) ) -> (let result = (Accountmanagementsystem__readvitals_alt.readvitals_alt requester targetuser accountmanagementsystem__friends accountmanagementsystem__vitals) in (
    ( (result = (if (((Measures__userid.to_rep (Array__Int.get accountmanagementsystem__friends targetuser)) = requester)) then (
     (Measures__bpm.to_rep (Array__Int.get accountmanagementsystem__vitals targetuser))) else (
     ( -1 )))) /\ (Measures__bpm.dynamic_property Measures__bpm.first Measures__bpm.last result) )))
    ))))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "accountmanagementsystem" defined at accountmanagementsystem.ads:9, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Accountmanagementsystem__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Measures__userid
 use        Measures__gpslocation
 use        Accountmanagementsystem__latestuser
 use        Accountmanagementsystem__latestuser__axiom
 use        Measures__userid__axiom
 use        Measures__latitude__axiom
 use        Measures__longitude__axiom
 use        Measures__gpslocation__axiom

 let def "GP_Subp:accountmanagementsystem.ads:9" "W:diverges:N" 
   (__void_param : unit) 
  requires { true }
  ensures { true }

   =
  ( abstract ensures {true}(Main.___ignore((if (((if ((Measures__userid.first <= Measures__userid.last)) then (
   ((Measures__userid.last - Measures__userid.first) + 1)) else (
   0)) > 0)) then (
   abstract ensures {true}(Main.___ignore(())) end )))) end ;
  ( Accountmanagementsystem__latestuser.latestuser := ( ( -1 ) );
  assume { (if ((Measures__userid.first <= Measures__userid.last)) then (
   (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last !Accountmanagementsystem__latestuser.latestuser)) else true) } );
  ( abstract ensures {true}(Main.___ignore((if (((if ((Measures__userid.first <= Measures__userid.last)) then (
   ((Measures__userid.last - Measures__userid.first) + 1)) else (
   0)) > 0)) then (
   abstract ensures {true}(Main.___ignore(())) end )))) end ;
  abstract ensures {true}(Main.___ignore((if (((if ((Measures__userid.first <= Measures__userid.last)) then (
   ((Measures__userid.last - Measures__userid.first) + 1)) else (
   0)) > 0)) then (
   abstract ensures {true}(Main.___ignore(())) end )))) end ;
  abstract ensures {true}(Main.___ignore((if (((if ((Measures__userid.first <= Measures__userid.last)) then (
   ((Measures__userid.last - Measures__userid.first) + 1)) else (
   0)) > 0)) then (
   abstract ensures {true}(Main.___ignore(())) end )))) end ;
  abstract ensures {true}(Main.___ignore((if (((if ((Measures__userid.first <= Measures__userid.last)) then (
   ((Measures__userid.last - Measures__userid.first) + 1)) else (
   0)) > 0)) then (
   abstract ensures {true}(Main.___ignore(())) end )))) end ;
  abstract ensures {true}(Main.___ignore((if (((if ((Measures__userid.first <= Measures__userid.last)) then (
   ((Measures__userid.last - Measures__userid.first) + 1)) else (
   0)) > 0)) then (
   abstract ensures {true}(Main.___ignore((let temp___standard__accountmanagementsystem_73 = (any Measures__gpslocation.gpslocation
   requires {true} 
   ensures {true} 
   ) in (
    ( (if ((Measures__gpslocation.lat__pred(temp___standard__accountmanagementsystem_73))) then (
     abstract ensures {true}(Main.___ignore(())) end ));
    (if ((Measures__gpslocation.long__pred(temp___standard__accountmanagementsystem_73))) then (
     abstract ensures {true}(Main.___ignore(())) end )) )))
   )) end )))) end ;
  ( "GP_Sloc:accountmanagementsystem.adb:87:1" () ) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "init" defined at accountmanagementsystem.ads:38, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Accountmanagementsystem__init__subprogram_def
 use import "int".Int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use import "real".RealInfix
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Boolean
 use        Array__Int
 use        Measures__userid
 use        Measures__bpm
 use        Measures__footsteps
 use        Measures__latitude
 use        Measures__longitude
 use        Measures__gpslocation
 use        Accountmanagementsystem__usersarray
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__vitalsarray
 use        Accountmanagementsystem__footstepsarray
 use        Accountmanagementsystem__locationsarray
 use        Accountmanagementsystem__users
 use        Accountmanagementsystem__insurers
 use        Accountmanagementsystem__friends
 use        Accountmanagementsystem__vitals
 use        Accountmanagementsystem__mfootsteps
 use        Accountmanagementsystem__locations
 use        Accountmanagementsystem__init__T1b
 use        Accountmanagementsystem__init__T2b
 use        Accountmanagementsystem__init__T3b
 use        Accountmanagementsystem__init__T4b
 use        Accountmanagementsystem__init__T5b
 use        Accountmanagementsystem__init__T6b
 use        Accountmanagementsystem__init__T7b
 use        Accountmanagementsystem__init__T8b
 use        Accountmanagementsystem__init__T9b
 use        Accountmanagementsystem__init__T10b
 use        Accountmanagementsystem__init__T11b
 use        Accountmanagementsystem__init__T12b
 use        Temp___standard__accountmanagementsystem_94
 use        Temp___standard__accountmanagementsystem_98
 use        Temp___standard__accountmanagementsystem_102
 use        Temp___standard__accountmanagementsystem_106
 use        Temp___standard__accountmanagementsystem_110
 use        Temp___standard__accountmanagementsystem_114
 use        Accountmanagementsystem__usersarray__axiom
 use        Accountmanagementsystem__useruserarray__axiom
 use        Accountmanagementsystem__vitalsarray__axiom
 use        Accountmanagementsystem__footstepsarray__axiom
 use        Accountmanagementsystem__locationsarray__axiom
 use        Accountmanagementsystem__users__axiom
 use        Accountmanagementsystem__insurers__axiom
 use        Accountmanagementsystem__friends__axiom
 use        Accountmanagementsystem__vitals__axiom
 use        Accountmanagementsystem__mfootsteps__axiom
 use        Accountmanagementsystem__locations__axiom
 use        Measures__userid__axiom
 use        Measures__bpm__axiom
 use        Measures__footsteps__axiom
 use        Measures__latitude__axiom
 use        Measures__longitude__axiom
 use        Measures__gpslocation__axiom
 use        Accountmanagementsystem__init__T1b__axiom
 use        Accountmanagementsystem__init__T2b__axiom
 use        Accountmanagementsystem__init__T3b__axiom
 use        Accountmanagementsystem__init__T4b__axiom
 use        Accountmanagementsystem__init__T5b__axiom
 use        Accountmanagementsystem__init__T6b__axiom
 use        Accountmanagementsystem__init__T7b__axiom
 use        Accountmanagementsystem__init__T8b__axiom
 use        Accountmanagementsystem__init__T9b__axiom
 use        Accountmanagementsystem__init__T10b__axiom
 use        Accountmanagementsystem__init__T11b__axiom
 use        Accountmanagementsystem__init__T12b__axiom

 let def "W:diverges:N" "GP_Subp:accountmanagementsystem.ads:38" 
   (__void_param : unit) 
  requires { true }
  ensures { ( "GP_Reason:VC_POSTCONDITION" "GP_Id:0" "GP_Sloc:accountmanagementsystem.ads:39:14" "comment:     Post => (for all I in Users'Range => Users(I) = False) and
             ^ accountmanagementsystem.ads:39:14:VC_POSTCONDITION" "GP_Shape:pragargs__and" "keep_on_simp" ( ( ( ( (forall i  : int.
   ( ( (( -1 ) <= i) /\ (i <= 100) ) -> ( "GP_Pretty_Ada:2847" "GP_Sloc:accountmanagementsystem.ads:39:43" ( ((Array__Int.get !Accountmanagementsystem__users.users i) = True) <-> false ) ) )) /\ (forall i  : int.
   ( ( (( -1 ) <= i) /\ (i <= 100) ) -> ( "GP_Pretty_Ada:2864" "GP_Sloc:accountmanagementsystem.ads:40:37" ((Measures__userid.to_rep (Array__Int.get !Accountmanagementsystem__friends.friends i)) = ( -1 )) ) )) ) /\ (forall i  : int.
   ( ( (( -1 ) <= i) /\ (i <= 100) ) -> ( "GP_Pretty_Ada:2883" "GP_Sloc:accountmanagementsystem.ads:41:36" ((Measures__bpm.to_rep (Array__Int.get !Accountmanagementsystem__vitals.vitals i)) = ( -1 )) ) )) ) /\ (forall i  : int.
   ( ( (( -1 ) <= i) /\ (i <= 100) ) -> ( "GP_Pretty_Ada:2902" "GP_Sloc:accountmanagementsystem.ads:42:40" ((Measures__footsteps.to_rep (Array__Int.get !Accountmanagementsystem__mfootsteps.mfootsteps i)) = 0) ) )) ) /\ (forall i  : int.
   ( ( (( -1 ) <= i) /\ (i <= 100) ) -> ( "GP_Pretty_Ada:2920" "GP_Sloc:accountmanagementsystem.ads:43:39" ((Measures__gpslocation.bool_eq (Array__Int.get !Accountmanagementsystem__locations.locations i) { Measures__gpslocation.__split_fields = { Measures__gpslocation.rec__lat = (Measures__latitude.of_real (0.0E-1)); Measures__gpslocation.rec__long = (Measures__longitude.of_real (0.0E-1)) } }) = True) ) )) ) ) }

   =
  ( () (* Assume dynamic property of params of the subprogram accountmanagementsystem.ads:38 *)
  ;
  ( () (* Declarations introduced by the compiler at the beginning of the subprogram accountmanagementsystem.ads:38 *)
  ;
  () (* Check for RTE in the Pre of the subprogram accountmanagementsystem.ads:38 *)
  ;
  abstract ensures {true}(Main.___ignore(True)) end ;
  () (* Assume Pre of the subprogram accountmanagementsystem.ads:38 *)
  ;
  assume { true } );
  ( () (* Check additional Pres of the subprogram accountmanagementsystem.ads:38 *)
  ;
  () (* Body of the subprogram accountmanagementsystem.ads:38 *)
  ;
  try
   ( ( "GP_Sloc:accountmanagementsystem.adb:8:13" Accountmanagementsystem__users.users := ( ( assert { ( "keep_on_simp" "GP_Reason:VC_LENGTH_CHECK" "GP_Id:1" "GP_Sloc:accountmanagementsystem.adb:8:16" "comment:      Users := (others => False);
               ^ accountmanagementsystem.adb:8:16:VC_LENGTH_CHECK" "GP_Shape:users_assign__aggr" ((if ((Accountmanagementsystem__init__T1b.first <= Accountmanagementsystem__init__T1b.last)) then (
    ((Accountmanagementsystem__init__T1b.last - Accountmanagementsystem__init__T1b.first) + 1)) else (
    0)) = (if ((Measures__userid.first <= Measures__userid.last)) then (
    ((Measures__userid.last - Measures__userid.first) + 1)) else (
    0))) ) };
   (Temp___standard__accountmanagementsystem_94.temp___standard__accountmanagementsystem_94((Boolean.of_int(0)))) ) ) );
   ( "GP_Sloc:accountmanagementsystem.adb:9:16" Accountmanagementsystem__insurers.insurers := ( ( assert { ( "keep_on_simp" "GP_Reason:VC_LENGTH_CHECK" "GP_Id:2" "GP_Sloc:accountmanagementsystem.adb:9:19" "comment:      Insurers := (others => UserID'First);
                  ^ accountmanagementsystem.adb:9:19:VC_LENGTH_CHECK" "GP_Shape:insurers_assign__aggr" ((if ((Accountmanagementsystem__init__T3b.first <= Accountmanagementsystem__init__T3b.last)) then (
    ((Accountmanagementsystem__init__T3b.last - Accountmanagementsystem__init__T3b.first) + 1)) else (
    0)) = (if ((Measures__userid.first <= Measures__userid.last)) then (
    ((Measures__userid.last - Measures__userid.first) + 1)) else (
    0))) ) };
   (Temp___standard__accountmanagementsystem_98.temp___standard__accountmanagementsystem_98(( -1 ))) ) ) );
   ( "GP_Sloc:accountmanagementsystem.adb:10:15" Accountmanagementsystem__friends.friends := ( ( assert { ( "keep_on_simp" "GP_Reason:VC_LENGTH_CHECK" "GP_Id:3" "GP_Sloc:accountmanagementsystem.adb:10:18" "comment:      Friends := (others => UserID'First);
                 ^ accountmanagementsystem.adb:10:18:VC_LENGTH_CHECK" "GP_Shape:friends_assign__aggr" ((if ((Accountmanagementsystem__init__T5b.first <= Accountmanagementsystem__init__T5b.last)) then (
    ((Accountmanagementsystem__init__T5b.last - Accountmanagementsystem__init__T5b.first) + 1)) else (
    0)) = (if ((Measures__userid.first <= Measures__userid.last)) then (
    ((Measures__userid.last - Measures__userid.first) + 1)) else (
    0))) ) };
   (Temp___standard__accountmanagementsystem_102.temp___standard__accountmanagementsystem_102(( -1 ))) ) ) );
   ( "GP_Sloc:accountmanagementsystem.adb:11:14" Accountmanagementsystem__vitals.vitals := ( ( assert { ( "keep_on_simp" "GP_Reason:VC_LENGTH_CHECK" "GP_Id:4" "GP_Sloc:accountmanagementsystem.adb:11:17" "comment:      Vitals := (others => BPM'First);
                ^ accountmanagementsystem.adb:11:17:VC_LENGTH_CHECK" "GP_Shape:vitals_assign__aggr" ((if ((Accountmanagementsystem__init__T7b.first <= Accountmanagementsystem__init__T7b.last)) then (
    ((Accountmanagementsystem__init__T7b.last - Accountmanagementsystem__init__T7b.first) + 1)) else (
    0)) = (if ((Measures__userid.first <= Measures__userid.last)) then (
    ((Measures__userid.last - Measures__userid.first) + 1)) else (
    0))) ) };
   (Temp___standard__accountmanagementsystem_106.temp___standard__accountmanagementsystem_106(( -1 ))) ) ) );
   ( "GP_Sloc:accountmanagementsystem.adb:12:18" Accountmanagementsystem__mfootsteps.mfootsteps := ( ( assert { ( "keep_on_simp" "GP_Reason:VC_LENGTH_CHECK" "GP_Id:5" "GP_Sloc:accountmanagementsystem.adb:12:21" "comment:      MFootsteps := (others => Footsteps'First);
                    ^ accountmanagementsystem.adb:12:21:VC_LENGTH_CHECK" "GP_Shape:mfootsteps_assign__aggr" ((if ((Accountmanagementsystem__init__T9b.first <= Accountmanagementsystem__init__T9b.last)) then (
    ((Accountmanagementsystem__init__T9b.last - Accountmanagementsystem__init__T9b.first) + 1)) else (
    0)) = (if ((Measures__userid.first <= Measures__userid.last)) then (
    ((Measures__userid.last - Measures__userid.first) + 1)) else (
    0))) ) };
   (Temp___standard__accountmanagementsystem_110.temp___standard__accountmanagementsystem_110(0)) ) ) );
   ( "GP_Sloc:accountmanagementsystem.adb:13:17" Accountmanagementsystem__locations.locations := ( ( assert { ( "keep_on_simp" "GP_Reason:VC_LENGTH_CHECK" "GP_Id:6" "GP_Sloc:accountmanagementsystem.adb:13:20" "comment:      Locations := (others => (0.0, 0.0));
                   ^ accountmanagementsystem.adb:13:20:VC_LENGTH_CHECK" "GP_Shape:locations_assign__aggr" ((if ((Accountmanagementsystem__init__T11b.first <= Accountmanagementsystem__init__T11b.last)) then (
    ((Accountmanagementsystem__init__T11b.last - Accountmanagementsystem__init__T11b.first) + 1)) else (
    0)) = (if ((Measures__userid.first <= Measures__userid.last)) then (
    ((Measures__userid.last - Measures__userid.first) + 1)) else (
    0))) ) };
   (Temp___standard__accountmanagementsystem_114.temp___standard__accountmanagementsystem_114({ Measures__gpslocation.__split_fields = { Measures__gpslocation.rec__lat = (Measures__latitude.of_real((0.0E-1))); Measures__gpslocation.rec__long = (Measures__longitude.of_real((0.0E-1))) } })) ) ) );
   raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* Check additional Posts and RTE in Post of the subprogram accountmanagementsystem.ads:38 *)
  ;
  abstract ensures {true}(Main.___ignore((Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb(( (let i = (any int
  ) in (
   (if ((Boolean.andb((( -1 ) <= i)) ((i <= 100)))) then (
    abstract ensures {true}(Main.___ignore(((Boolean.to_int((Array__Int.get(!Accountmanagementsystem__users.users) (i)))) = (Boolean.to_int((Boolean.of_int(0))))))) end ))))
  ;
  (any bool
  requires {true} 
  ensures {( (result = True) <-> (forall i  : int.
   ( ( (( -1 ) <= i) /\ (i <= 100) ) -> ( ((Array__Int.get !Accountmanagementsystem__users.users i) = True) <-> false ) )) )} 
  ) )) (( (let i = (any int
  ) in (
   (if ((Boolean.andb((( -1 ) <= i)) ((i <= 100)))) then (
    abstract ensures {true}(Main.___ignore(((Measures__userid.to_rep((Array__Int.get(!Accountmanagementsystem__friends.friends) (i)))) = ( -1 )))) end ))))
  ;
  (any bool
  requires {true} 
  ensures {( (result = True) <-> (forall i  : int.
   ( ( (( -1 ) <= i) /\ (i <= 100) ) -> ((Measures__userid.to_rep (Array__Int.get !Accountmanagementsystem__friends.friends i)) = ( -1 )) )) )} 
  ) )))) (( (let i = (any int
  ) in (
   (if ((Boolean.andb((( -1 ) <= i)) ((i <= 100)))) then (
    abstract ensures {true}(Main.___ignore(((Measures__bpm.to_rep((Array__Int.get(!Accountmanagementsystem__vitals.vitals) (i)))) = ( -1 )))) end ))))
  ;
  (any bool
  requires {true} 
  ensures {( (result = True) <-> (forall i  : int.
   ( ( (( -1 ) <= i) /\ (i <= 100) ) -> ((Measures__bpm.to_rep (Array__Int.get !Accountmanagementsystem__vitals.vitals i)) = ( -1 )) )) )} 
  ) )))) (( (let i = (any int
  ) in (
   (if ((Boolean.andb((( -1 ) <= i)) ((i <= 100)))) then (
    abstract ensures {true}(Main.___ignore(((Measures__footsteps.to_rep((Array__Int.get(!Accountmanagementsystem__mfootsteps.mfootsteps) (i)))) = 0))) end ))))
  ;
  (any bool
  requires {true} 
  ensures {( (result = True) <-> (forall i  : int.
   ( ( (( -1 ) <= i) /\ (i <= 100) ) -> ((Measures__footsteps.to_rep (Array__Int.get !Accountmanagementsystem__mfootsteps.mfootsteps i)) = 0) )) )} 
  ) )))) (( (let i = (any int
  ) in (
   (if ((Boolean.andb((( -1 ) <= i)) ((i <= 100)))) then (
    abstract ensures {true}(Main.___ignore((Measures__gpslocation.bool_eq((Array__Int.get(!Accountmanagementsystem__locations.locations) (i))) ({ Measures__gpslocation.__split_fields = { Measures__gpslocation.rec__lat = (Measures__latitude.of_real((0.0E-1))); Measures__gpslocation.rec__long = (Measures__longitude.of_real((0.0E-1))) } })))) end ))))
  ;
  (any bool
  requires {true} 
  ensures {( (result = True) <-> (forall i  : int.
   ( ( (( -1 ) <= i) /\ (i <= 100) ) -> ((Measures__gpslocation.bool_eq (Array__Int.get !Accountmanagementsystem__locations.locations i) { Measures__gpslocation.__split_fields = { Measures__gpslocation.rec__lat = (Measures__latitude.of_real (0.0E-1)); Measures__gpslocation.rec__long = (Measures__longitude.of_real (0.0E-1)) } }) = True) )) )} 
  ) ))))) end  ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "createuser" defined at accountmanagementsystem.ads:45, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Accountmanagementsystem__createuser__subprogram_def
 use import "int".Int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Boolean
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__usersarray
 use        Accountmanagementsystem__users
 use        Accountmanagementsystem__latestuser
 use        Accountmanagementsystem__createuser__newuser
 use        Accountmanagementsystem__usersarray__axiom
 use        Accountmanagementsystem__users__axiom
 use        Accountmanagementsystem__latestuser__axiom
 use        Accountmanagementsystem__createuser__newuser__axiom
 use        Measures__userid__axiom

 let def "W:diverges:N" "GP_Subp:accountmanagementsystem.ads:45" 
   (__void_param : unit) 
  requires { true }
  ensures { ( "GP_Reason:VC_POSTCONDITION" "keep_on_simp" "GP_Sloc:accountmanagementsystem.ads:47:14" "GP_Id:7" "comment:     Post => Users(NewUser) = True;
             ^ accountmanagementsystem.ads:47:14:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( "GP_Pretty_Ada:3955" "GP_Sloc:accountmanagementsystem.ads:47:14" ( ((Array__Int.get !Accountmanagementsystem__users.users !Accountmanagementsystem__createuser__newuser.newuser) = True) <-> true ) ) ) }

   =
  ( ( () (* Assume dynamic property of params of the subprogram accountmanagementsystem.ads:45 *)
  ;
  assume { (if ((Measures__userid.first <= Measures__userid.last)) then (
   (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last !Accountmanagementsystem__latestuser.latestuser)) else true) };
  assume { (if ((Measures__userid.first <= Measures__userid.last)) then (
   (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last !Accountmanagementsystem__createuser__newuser.newuser)) else true) } );
  ( ( () (* Declarations introduced by the compiler at the beginning of the subprogram accountmanagementsystem.ads:45 *)
  ;
  () (* Check for RTE in the Pre of the subprogram accountmanagementsystem.ads:45 *)
  ;
  abstract ensures {true}(Main.___ignore((!Accountmanagementsystem__latestuser.latestuser < 100))) end ;
  () (* Assume Pre of the subprogram accountmanagementsystem.ads:45 *)
  ;
  assume { (!Accountmanagementsystem__latestuser.latestuser < 100) } );
  ( () (* Check additional Pres of the subprogram accountmanagementsystem.ads:45 *)
  ;
  () (* Body of the subprogram accountmanagementsystem.ads:45 *)
  ;
  try
   ( ( "GP_Sloc:accountmanagementsystem.adb:18:18" Accountmanagementsystem__latestuser.latestuser := ( ( "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Id:8" "GP_Sloc:accountmanagementsystem.adb:18:32" "comment:      LatestUser := LatestUser + 1;
                               ^ accountmanagementsystem.adb:18:32:VC_RANGE_CHECK" "GP_Shape:latestuser_assign__add" (Measures__userid.range_check_((!Accountmanagementsystem__latestuser.latestuser + 1))) ) ) );
   ( "GP_Sloc:accountmanagementsystem.adb:19:25" Accountmanagementsystem__users.users := ( (Array__Int.set(!Accountmanagementsystem__users.users) (!Accountmanagementsystem__latestuser.latestuser) ((Boolean.of_int(1)))) ) );
   ( "GP_Sloc:accountmanagementsystem.adb:20:15" Accountmanagementsystem__createuser__newuser.newuser := ( !Accountmanagementsystem__latestuser.latestuser ) );
   raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* Check additional Posts and RTE in Post of the subprogram accountmanagementsystem.ads:45 *)
  ;
  abstract ensures {true}(Main.___ignore(((Boolean.to_int((Array__Int.get(!Accountmanagementsystem__users.users) (!Accountmanagementsystem__createuser__newuser.newuser)))) = (Boolean.to_int((Boolean.of_int(1))))))) end  ) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "setinsurer" defined at accountmanagementsystem.ads:49, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Accountmanagementsystem__setinsurer__subprogram_def
 use import "int".Int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Boolean
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__insurers
 use        Accountmanagementsystem__setinsurer__wearer
 use        Accountmanagementsystem__setinsurer__insurer
 use        Temp___standard__accountmanagementsystem_7
 use        Accountmanagementsystem__useruserarray__axiom
 use        Accountmanagementsystem__insurers__axiom
 use        Accountmanagementsystem__setinsurer__wearer__axiom
 use        Accountmanagementsystem__setinsurer__insurer__axiom
 use        Measures__userid__axiom

 let def "W:diverges:N" "GP_Subp:accountmanagementsystem.ads:49" 
   (__void_param : unit) 
  requires { true }
  ensures { ( "GP_Reason:VC_POSTCONDITION" "keep_on_simp" "GP_Shape:pragargs__cmp" "GP_Sloc:accountmanagementsystem.ads:51:14" "GP_Id:9" "comment:     Post => (Insurers = Insurers'Old'Update(Wearer => Insurer));
             ^ accountmanagementsystem.ads:51:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4002" "GP_Sloc:accountmanagementsystem.ads:51:14" ((let temp___standard__accountmanagementsystem_127 = (Temp___standard__accountmanagementsystem_7.temp___standard__accountmanagementsystem_7 (old !Accountmanagementsystem__insurers.insurers ) Accountmanagementsystem__setinsurer__wearer.wearer Accountmanagementsystem__setinsurer__insurer.insurer) in (
   (Array__Int.bool_eq !Accountmanagementsystem__insurers.insurers Measures__userid.first Measures__userid.last temp___standard__accountmanagementsystem_127 Measures__userid.first Measures__userid.last)))
   = True) ) ) }

   =
  ( ( () (* Assume dynamic property of params of the subprogram accountmanagementsystem.ads:49 *)
  ;
  assume { (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last Accountmanagementsystem__setinsurer__wearer.wearer) };
  assume { (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last Accountmanagementsystem__setinsurer__insurer.insurer) } );
  ( ( () (* Declarations introduced by the compiler at the beginning of the subprogram accountmanagementsystem.ads:49 *)
  ;
  () (* Check for RTE in the Pre of the subprogram accountmanagementsystem.ads:49 *)
  ;
  abstract ensures {true}(Main.___ignore((Boolean.andb((Boolean.andb((( -1 ) <= Accountmanagementsystem__setinsurer__wearer.wearer)) ((Accountmanagementsystem__setinsurer__wearer.wearer <= 100)))) ((Boolean.andb((( -1 ) <= Accountmanagementsystem__setinsurer__insurer.insurer)) ((Accountmanagementsystem__setinsurer__insurer.insurer <= 100))))))) end ;
  () (* Assume Pre of the subprogram accountmanagementsystem.ads:49 *)
  ;
  assume { ( ( (( -1 ) <= Accountmanagementsystem__setinsurer__wearer.wearer) /\ (Accountmanagementsystem__setinsurer__wearer.wearer <= 100) ) /\ ( (( -1 ) <= Accountmanagementsystem__setinsurer__insurer.insurer) /\ (Accountmanagementsystem__setinsurer__insurer.insurer <= 100) ) ) } );
  ( abstract ensures {true}(Main.___ignore(!Accountmanagementsystem__insurers.insurers)) end ;
  (let temp___standard__accountmanagementsystem_125 = (any Accountmanagementsystem__useruserarray.useruserarray
  ensures {(result = !Accountmanagementsystem__insurers.insurers)} 
  ) in (
   ( () (* Check additional Pres of the subprogram accountmanagementsystem.ads:49 *)
   ;
   () (* Body of the subprogram accountmanagementsystem.ads:49 *)
   ;
   try
    ( ( "GP_Sloc:accountmanagementsystem.adb:25:24" Accountmanagementsystem__insurers.insurers := ( (Array__Int.set(!Accountmanagementsystem__insurers.insurers) (Accountmanagementsystem__setinsurer__wearer.wearer) ((Measures__userid.of_rep(Accountmanagementsystem__setinsurer__insurer.insurer)))) ) );
    raise Return__exc )
   with
    Return__exc -> ()
   end;
   () (* Check additional Posts and RTE in Post of the subprogram accountmanagementsystem.ads:49 *)
   ;
   abstract ensures {true}(Main.___ignore((let temp___standard__accountmanagementsystem_126 = (Temp___standard__accountmanagementsystem_7.temp___standard__accountmanagementsystem_7(temp___standard__accountmanagementsystem_125) (Accountmanagementsystem__setinsurer__wearer.wearer) (Accountmanagementsystem__setinsurer__insurer.insurer)) in (
    (Array__Int.bool_eq(!Accountmanagementsystem__insurers.insurers) (Measures__userid.first) (Measures__userid.last) (temp___standard__accountmanagementsystem_126) (Measures__userid.first) (Measures__userid.last))))
   )) end  )))
   ) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "readinsurer" defined at accountmanagementsystem.ads:53, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Accountmanagementsystem__readinsurer__subprogram_def
 use import "int".Int
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__insurers
 use        Accountmanagementsystem__readinsurer__wearer
 use        Accountmanagementsystem__useruserarray__axiom
 use        Accountmanagementsystem__insurers__axiom
 use        Accountmanagementsystem__readinsurer__wearer__axiom
 use        Measures__userid__axiom

 val accountmanagementsystem__readinsurer__result "\"GP_Ada_Name:ReadInsurer'Result\""  : ref Measures__userid.__split
 
 let def "W:diverges:N" "GP_Subp:accountmanagementsystem.ads:53" 
   (__void_param : unit) 
  requires { true }
  ensures { true }

   =
  ( ( () (* Assume dynamic property of params of the subprogram accountmanagementsystem.ads:53 *)
  ;
  assume { (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last Accountmanagementsystem__readinsurer__wearer.wearer) } );
  ( ( () (* Declarations introduced by the compiler at the beginning of the subprogram accountmanagementsystem.ads:53 *)
  ;
  () (* Check for RTE in the Pre of the subprogram accountmanagementsystem.ads:53 *)
  ;
  abstract ensures {true}(Main.___ignore(True)) end ;
  () (* Assume Pre of the subprogram accountmanagementsystem.ads:53 *)
  ;
  assume { true } );
  ( () (* Check additional Pres of the subprogram accountmanagementsystem.ads:53 *)
  ;
  () (* Body of the subprogram accountmanagementsystem.ads:53 *)
  ;
  try
   ( ( "GP_Sloc:accountmanagementsystem.ads:54:8" ( accountmanagementsystem__readinsurer__result := ( (Measures__userid.to_rep((Array__Int.get(!Accountmanagementsystem__insurers.insurers) (Accountmanagementsystem__readinsurer__wearer.wearer)))) );
   raise Return__exc ) );
   raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* Check additional Posts and RTE in Post of the subprogram accountmanagementsystem.ads:53 *)
  ;
  abstract ensures {true}(Main.___ignore(True)) end ;
  !accountmanagementsystem__readinsurer__result ) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "removeinsurer" defined at accountmanagementsystem.ads:56, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Accountmanagementsystem__removeinsurer__subprogram_def
 use import "int".Int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__insurers
 use        Accountmanagementsystem__removeinsurer__wearer
 use        Temp___standard__accountmanagementsystem_17
 use        Accountmanagementsystem__useruserarray__axiom
 use        Accountmanagementsystem__insurers__axiom
 use        Accountmanagementsystem__removeinsurer__wearer__axiom
 use        Measures__userid__axiom

 let def "W:diverges:N" "GP_Subp:accountmanagementsystem.ads:56" 
   (__void_param : unit) 
  requires { true }
  ensures { ( "GP_Reason:VC_POSTCONDITION" "keep_on_simp" "GP_Shape:pragargs__cmp" "GP_Sloc:accountmanagementsystem.ads:58:14" "GP_Id:10" "comment:     Post => (Insurers = Insurers'Old'Update(Wearer => UserID'First));
             ^ accountmanagementsystem.ads:58:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4070" "GP_Sloc:accountmanagementsystem.ads:58:14" ((let temp___standard__accountmanagementsystem_132 = (Temp___standard__accountmanagementsystem_17.temp___standard__accountmanagementsystem_17 (old !Accountmanagementsystem__insurers.insurers ) Accountmanagementsystem__removeinsurer__wearer.wearer ( -1 )) in (
   (Array__Int.bool_eq !Accountmanagementsystem__insurers.insurers Measures__userid.first Measures__userid.last temp___standard__accountmanagementsystem_132 Measures__userid.first Measures__userid.last)))
   = True) ) ) }

   =
  ( ( () (* Assume dynamic property of params of the subprogram accountmanagementsystem.ads:56 *)
  ;
  assume { (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last Accountmanagementsystem__removeinsurer__wearer.wearer) } );
  ( ( () (* Declarations introduced by the compiler at the beginning of the subprogram accountmanagementsystem.ads:56 *)
  ;
  () (* Check for RTE in the Pre of the subprogram accountmanagementsystem.ads:56 *)
  ;
  abstract ensures {true}(Main.___ignore(((Measures__userid.to_rep((Array__Int.get(!Accountmanagementsystem__insurers.insurers) (Accountmanagementsystem__removeinsurer__wearer.wearer)))) <> ( -1 )))) end ;
  () (* Assume Pre of the subprogram accountmanagementsystem.ads:56 *)
  ;
  assume { ((Measures__userid.to_rep (Array__Int.get !Accountmanagementsystem__insurers.insurers Accountmanagementsystem__removeinsurer__wearer.wearer)) <> ( -1 )) } );
  ( abstract ensures {true}(Main.___ignore(!Accountmanagementsystem__insurers.insurers)) end ;
  (let temp___standard__accountmanagementsystem_130 = (any Accountmanagementsystem__useruserarray.useruserarray
  ensures {(result = !Accountmanagementsystem__insurers.insurers)} 
  ) in (
   ( () (* Check additional Pres of the subprogram accountmanagementsystem.ads:56 *)
   ;
   () (* Body of the subprogram accountmanagementsystem.ads:56 *)
   ;
   try
    ( ( "GP_Sloc:accountmanagementsystem.adb:30:24" Accountmanagementsystem__insurers.insurers := ( (Array__Int.set(!Accountmanagementsystem__insurers.insurers) (Accountmanagementsystem__removeinsurer__wearer.wearer) ((Measures__userid.of_rep(( -1 ))))) ) );
    raise Return__exc )
   with
    Return__exc -> ()
   end;
   () (* Check additional Posts and RTE in Post of the subprogram accountmanagementsystem.ads:56 *)
   ;
   abstract ensures {true}(Main.___ignore((let temp___standard__accountmanagementsystem_131 = (Temp___standard__accountmanagementsystem_17.temp___standard__accountmanagementsystem_17(temp___standard__accountmanagementsystem_130) (Accountmanagementsystem__removeinsurer__wearer.wearer) (( -1 ))) in (
    (Array__Int.bool_eq(!Accountmanagementsystem__insurers.insurers) (Measures__userid.first) (Measures__userid.last) (temp___standard__accountmanagementsystem_131) (Measures__userid.first) (Measures__userid.last))))
   )) end  )))
   ) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "setfriend" defined at accountmanagementsystem.ads:60, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Accountmanagementsystem__setfriend__subprogram_def
 use import "int".Int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Boolean
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__friends
 use        Accountmanagementsystem__setfriend__wearer
 use        Accountmanagementsystem__setfriend__friend
 use        Temp___standard__accountmanagementsystem_25
 use        Accountmanagementsystem__useruserarray__axiom
 use        Accountmanagementsystem__friends__axiom
 use        Accountmanagementsystem__setfriend__wearer__axiom
 use        Accountmanagementsystem__setfriend__friend__axiom
 use        Measures__userid__axiom

 let def "W:diverges:N" "GP_Subp:accountmanagementsystem.ads:60" 
   (__void_param : unit) 
  requires { true }
  ensures { ( "GP_Reason:VC_POSTCONDITION" "keep_on_simp" "GP_Shape:pragargs__cmp" "GP_Sloc:accountmanagementsystem.ads:62:14" "GP_Id:11" "comment:     Post => Friends = Friends'Old'Update(Wearer => Friend);
             ^ accountmanagementsystem.ads:62:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4117" "GP_Sloc:accountmanagementsystem.ads:62:14" ((let temp___standard__accountmanagementsystem_136 = (Temp___standard__accountmanagementsystem_25.temp___standard__accountmanagementsystem_25 (old !Accountmanagementsystem__friends.friends ) Accountmanagementsystem__setfriend__wearer.wearer Accountmanagementsystem__setfriend__friend.friend) in (
   (Array__Int.bool_eq !Accountmanagementsystem__friends.friends Measures__userid.first Measures__userid.last temp___standard__accountmanagementsystem_136 Measures__userid.first Measures__userid.last)))
   = True) ) ) }

   =
  ( ( () (* Assume dynamic property of params of the subprogram accountmanagementsystem.ads:60 *)
  ;
  assume { (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last Accountmanagementsystem__setfriend__wearer.wearer) };
  assume { (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last Accountmanagementsystem__setfriend__friend.friend) } );
  ( ( () (* Declarations introduced by the compiler at the beginning of the subprogram accountmanagementsystem.ads:60 *)
  ;
  () (* Check for RTE in the Pre of the subprogram accountmanagementsystem.ads:60 *)
  ;
  abstract ensures {true}(Main.___ignore((Boolean.andb((Boolean.andb((( -1 ) <= Accountmanagementsystem__setfriend__wearer.wearer)) ((Accountmanagementsystem__setfriend__wearer.wearer <= 100)))) ((Boolean.andb((( -1 ) <= Accountmanagementsystem__setfriend__friend.friend)) ((Accountmanagementsystem__setfriend__friend.friend <= 100))))))) end ;
  () (* Assume Pre of the subprogram accountmanagementsystem.ads:60 *)
  ;
  assume { ( ( (( -1 ) <= Accountmanagementsystem__setfriend__wearer.wearer) /\ (Accountmanagementsystem__setfriend__wearer.wearer <= 100) ) /\ ( (( -1 ) <= Accountmanagementsystem__setfriend__friend.friend) /\ (Accountmanagementsystem__setfriend__friend.friend <= 100) ) ) } );
  ( abstract ensures {true}(Main.___ignore(!Accountmanagementsystem__friends.friends)) end ;
  (let temp___standard__accountmanagementsystem_134 = (any Accountmanagementsystem__useruserarray.useruserarray
  ensures {(result = !Accountmanagementsystem__friends.friends)} 
  ) in (
   ( () (* Check additional Pres of the subprogram accountmanagementsystem.ads:60 *)
   ;
   () (* Body of the subprogram accountmanagementsystem.ads:60 *)
   ;
   try
    ( ( "GP_Sloc:accountmanagementsystem.adb:35:23" Accountmanagementsystem__friends.friends := ( (Array__Int.set(!Accountmanagementsystem__friends.friends) (Accountmanagementsystem__setfriend__wearer.wearer) ((Measures__userid.of_rep(Accountmanagementsystem__setfriend__friend.friend)))) ) );
    raise Return__exc )
   with
    Return__exc -> ()
   end;
   () (* Check additional Posts and RTE in Post of the subprogram accountmanagementsystem.ads:60 *)
   ;
   abstract ensures {true}(Main.___ignore((let temp___standard__accountmanagementsystem_135 = (Temp___standard__accountmanagementsystem_25.temp___standard__accountmanagementsystem_25(temp___standard__accountmanagementsystem_134) (Accountmanagementsystem__setfriend__wearer.wearer) (Accountmanagementsystem__setfriend__friend.friend)) in (
    (Array__Int.bool_eq(!Accountmanagementsystem__friends.friends) (Measures__userid.first) (Measures__userid.last) (temp___standard__accountmanagementsystem_135) (Measures__userid.first) (Measures__userid.last))))
   )) end  )))
   ) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "readfriend" defined at accountmanagementsystem.ads:64, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Accountmanagementsystem__readfriend__subprogram_def
 use import "int".Int
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__friends
 use        Accountmanagementsystem__readfriend__wearer
 use        Accountmanagementsystem__useruserarray__axiom
 use        Accountmanagementsystem__friends__axiom
 use        Accountmanagementsystem__readfriend__wearer__axiom
 use        Measures__userid__axiom

 val accountmanagementsystem__readfriend__result "\"GP_Ada_Name:ReadFriend'Result\""  : ref Measures__userid.__split
 
 let def "W:diverges:N" "GP_Subp:accountmanagementsystem.ads:64" 
   (__void_param : unit) 
  requires { true }
  ensures { true }

   =
  ( ( () (* Assume dynamic property of params of the subprogram accountmanagementsystem.ads:64 *)
  ;
  assume { (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last Accountmanagementsystem__readfriend__wearer.wearer) } );
  ( ( () (* Declarations introduced by the compiler at the beginning of the subprogram accountmanagementsystem.ads:64 *)
  ;
  () (* Check for RTE in the Pre of the subprogram accountmanagementsystem.ads:64 *)
  ;
  abstract ensures {true}(Main.___ignore(True)) end ;
  () (* Assume Pre of the subprogram accountmanagementsystem.ads:64 *)
  ;
  assume { true } );
  ( () (* Check additional Pres of the subprogram accountmanagementsystem.ads:64 *)
  ;
  () (* Body of the subprogram accountmanagementsystem.ads:64 *)
  ;
  try
   ( ( "GP_Sloc:accountmanagementsystem.ads:65:8" ( accountmanagementsystem__readfriend__result := ( (Measures__userid.to_rep((Array__Int.get(!Accountmanagementsystem__friends.friends) (Accountmanagementsystem__readfriend__wearer.wearer)))) );
   raise Return__exc ) );
   raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* Check additional Posts and RTE in Post of the subprogram accountmanagementsystem.ads:64 *)
  ;
  abstract ensures {true}(Main.___ignore(True)) end ;
  !accountmanagementsystem__readfriend__result ) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "removefriend" defined at accountmanagementsystem.ads:67, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Accountmanagementsystem__removefriend__subprogram_def
 use import "int".Int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__friends
 use        Accountmanagementsystem__removefriend__wearer
 use        Temp___standard__accountmanagementsystem_35
 use        Accountmanagementsystem__useruserarray__axiom
 use        Accountmanagementsystem__friends__axiom
 use        Accountmanagementsystem__removefriend__wearer__axiom
 use        Measures__userid__axiom

 let def "W:diverges:N" "GP_Subp:accountmanagementsystem.ads:67" 
   (__void_param : unit) 
  requires { true }
  ensures { ( "GP_Reason:VC_POSTCONDITION" "keep_on_simp" "GP_Shape:pragargs__cmp" "GP_Sloc:accountmanagementsystem.ads:69:14" "GP_Id:12" "comment:     Post => (Friends = Friends'Old'Update(Wearer => UserID'First));
             ^ accountmanagementsystem.ads:69:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4185" "GP_Sloc:accountmanagementsystem.ads:69:14" ((let temp___standard__accountmanagementsystem_141 = (Temp___standard__accountmanagementsystem_35.temp___standard__accountmanagementsystem_35 (old !Accountmanagementsystem__friends.friends ) Accountmanagementsystem__removefriend__wearer.wearer ( -1 )) in (
   (Array__Int.bool_eq !Accountmanagementsystem__friends.friends Measures__userid.first Measures__userid.last temp___standard__accountmanagementsystem_141 Measures__userid.first Measures__userid.last)))
   = True) ) ) }

   =
  ( ( () (* Assume dynamic property of params of the subprogram accountmanagementsystem.ads:67 *)
  ;
  assume { (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last Accountmanagementsystem__removefriend__wearer.wearer) } );
  ( ( () (* Declarations introduced by the compiler at the beginning of the subprogram accountmanagementsystem.ads:67 *)
  ;
  () (* Check for RTE in the Pre of the subprogram accountmanagementsystem.ads:67 *)
  ;
  abstract ensures {true}(Main.___ignore(((Measures__userid.to_rep((Array__Int.get(!Accountmanagementsystem__friends.friends) (Accountmanagementsystem__removefriend__wearer.wearer)))) <> ( -1 )))) end ;
  () (* Assume Pre of the subprogram accountmanagementsystem.ads:67 *)
  ;
  assume { ((Measures__userid.to_rep (Array__Int.get !Accountmanagementsystem__friends.friends Accountmanagementsystem__removefriend__wearer.wearer)) <> ( -1 )) } );
  ( abstract ensures {true}(Main.___ignore(!Accountmanagementsystem__friends.friends)) end ;
  (let temp___standard__accountmanagementsystem_139 = (any Accountmanagementsystem__useruserarray.useruserarray
  ensures {(result = !Accountmanagementsystem__friends.friends)} 
  ) in (
   ( () (* Check additional Pres of the subprogram accountmanagementsystem.ads:67 *)
   ;
   () (* Body of the subprogram accountmanagementsystem.ads:67 *)
   ;
   try
    ( ( "GP_Sloc:accountmanagementsystem.adb:40:23" Accountmanagementsystem__friends.friends := ( (Array__Int.set(!Accountmanagementsystem__friends.friends) (Accountmanagementsystem__removefriend__wearer.wearer) ((Measures__userid.of_rep(( -1 ))))) ) );
    raise Return__exc )
   with
    Return__exc -> ()
   end;
   () (* Check additional Posts and RTE in Post of the subprogram accountmanagementsystem.ads:67 *)
   ;
   abstract ensures {true}(Main.___ignore((let temp___standard__accountmanagementsystem_140 = (Temp___standard__accountmanagementsystem_35.temp___standard__accountmanagementsystem_35(temp___standard__accountmanagementsystem_139) (Accountmanagementsystem__removefriend__wearer.wearer) (( -1 ))) in (
    (Array__Int.bool_eq(!Accountmanagementsystem__friends.friends) (Measures__userid.first) (Measures__userid.last) (temp___standard__accountmanagementsystem_140) (Measures__userid.first) (Measures__userid.last))))
   )) end  )))
   ) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "updatevitals" defined at accountmanagementsystem.ads:71, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Accountmanagementsystem__updatevitals__subprogram_def
 use import "int".Int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Boolean
 use        Array__Int
 use        Measures__userid
 use        Measures__bpm
 use        Accountmanagementsystem__vitalsarray
 use        Accountmanagementsystem__vitals
 use        Accountmanagementsystem__updatevitals__wearer
 use        Accountmanagementsystem__updatevitals__newvitals
 use        Temp___standard__accountmanagementsystem_43
 use        Accountmanagementsystem__vitalsarray__axiom
 use        Accountmanagementsystem__vitals__axiom
 use        Accountmanagementsystem__updatevitals__wearer__axiom
 use        Accountmanagementsystem__updatevitals__newvitals__axiom
 use        Measures__userid__axiom
 use        Measures__bpm__axiom

 let def "W:diverges:N" "GP_Subp:accountmanagementsystem.ads:71" 
   (__void_param : unit) 
  requires { true }
  ensures { ( "GP_Reason:VC_POSTCONDITION" "keep_on_simp" "GP_Shape:pragargs__cmp" "GP_Sloc:accountmanagementsystem.ads:73:14" "GP_Id:13" "comment:     Post => Vitals = Vitals'Old'Update(Wearer => NewVitals);
             ^ accountmanagementsystem.ads:73:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4227" "GP_Sloc:accountmanagementsystem.ads:73:14" ((let temp___standard__accountmanagementsystem_145 = (Temp___standard__accountmanagementsystem_43.temp___standard__accountmanagementsystem_43 (old !Accountmanagementsystem__vitals.vitals ) Accountmanagementsystem__updatevitals__wearer.wearer Accountmanagementsystem__updatevitals__newvitals.newvitals) in (
   (Array__Int.bool_eq !Accountmanagementsystem__vitals.vitals Measures__userid.first Measures__userid.last temp___standard__accountmanagementsystem_145 Measures__userid.first Measures__userid.last)))
   = True) ) ) }

   =
  ( ( () (* Assume dynamic property of params of the subprogram accountmanagementsystem.ads:71 *)
  ;
  assume { (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last Accountmanagementsystem__updatevitals__wearer.wearer) };
  assume { (Measures__bpm.dynamic_property Measures__bpm.first Measures__bpm.last Accountmanagementsystem__updatevitals__newvitals.newvitals) } );
  ( ( () (* Declarations introduced by the compiler at the beginning of the subprogram accountmanagementsystem.ads:71 *)
  ;
  () (* Check for RTE in the Pre of the subprogram accountmanagementsystem.ads:71 *)
  ;
  abstract ensures {true}(Main.___ignore((Boolean.andb((( -1 ) <= Accountmanagementsystem__updatevitals__wearer.wearer)) ((Accountmanagementsystem__updatevitals__wearer.wearer <= 100))))) end ;
  () (* Assume Pre of the subprogram accountmanagementsystem.ads:71 *)
  ;
  assume { ( (( -1 ) <= Accountmanagementsystem__updatevitals__wearer.wearer) /\ (Accountmanagementsystem__updatevitals__wearer.wearer <= 100) ) } );
  ( abstract ensures {true}(Main.___ignore(!Accountmanagementsystem__vitals.vitals)) end ;
  (let temp___standard__accountmanagementsystem_143 = (any Accountmanagementsystem__vitalsarray.vitalsarray
  ensures {(result = !Accountmanagementsystem__vitals.vitals)} 
  ) in (
   ( () (* Check additional Pres of the subprogram accountmanagementsystem.ads:71 *)
   ;
   () (* Body of the subprogram accountmanagementsystem.ads:71 *)
   ;
   try
    ( ( "GP_Sloc:accountmanagementsystem.adb:56:22" Accountmanagementsystem__vitals.vitals := ( (Array__Int.set(!Accountmanagementsystem__vitals.vitals) (Accountmanagementsystem__updatevitals__wearer.wearer) ((Measures__bpm.of_rep(Accountmanagementsystem__updatevitals__newvitals.newvitals)))) ) );
    raise Return__exc )
   with
    Return__exc -> ()
   end;
   () (* Check additional Posts and RTE in Post of the subprogram accountmanagementsystem.ads:71 *)
   ;
   abstract ensures {true}(Main.___ignore((let temp___standard__accountmanagementsystem_144 = (Temp___standard__accountmanagementsystem_43.temp___standard__accountmanagementsystem_43(temp___standard__accountmanagementsystem_143) (Accountmanagementsystem__updatevitals__wearer.wearer) (Accountmanagementsystem__updatevitals__newvitals.newvitals)) in (
    (Array__Int.bool_eq(!Accountmanagementsystem__vitals.vitals) (Measures__userid.first) (Measures__userid.last) (temp___standard__accountmanagementsystem_144) (Measures__userid.first) (Measures__userid.last))))
   )) end  )))
   ) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "updatefootsteps" defined at accountmanagementsystem.ads:75, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Accountmanagementsystem__updatefootsteps__subprogram_def
 use import "int".Int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Boolean
 use        Array__Int
 use        Measures__userid
 use        Measures__footsteps
 use        Accountmanagementsystem__footstepsarray
 use        Accountmanagementsystem__mfootsteps
 use        Accountmanagementsystem__updatefootsteps__wearer
 use        Accountmanagementsystem__updatefootsteps__newfootsteps
 use        Temp___standard__accountmanagementsystem_51
 use        Accountmanagementsystem__footstepsarray__axiom
 use        Accountmanagementsystem__mfootsteps__axiom
 use        Accountmanagementsystem__updatefootsteps__wearer__axiom
 use        Accountmanagementsystem__updatefootsteps__newfootsteps__axiom
 use        Measures__userid__axiom
 use        Measures__footsteps__axiom

 let def "W:diverges:N" "GP_Subp:accountmanagementsystem.ads:75" 
   (__void_param : unit) 
  requires { true }
  ensures { ( "GP_Reason:VC_POSTCONDITION" "keep_on_simp" "GP_Shape:pragargs__cmp" "GP_Sloc:accountmanagementsystem.ads:78:14" "GP_Id:14" "comment:     Post => MFootsteps = MFootsteps'Old'Update(Wearer => NewFootsteps);
             ^ accountmanagementsystem.ads:78:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4269" "GP_Sloc:accountmanagementsystem.ads:78:14" ((let temp___standard__accountmanagementsystem_149 = (Temp___standard__accountmanagementsystem_51.temp___standard__accountmanagementsystem_51 (old !Accountmanagementsystem__mfootsteps.mfootsteps ) Accountmanagementsystem__updatefootsteps__wearer.wearer Accountmanagementsystem__updatefootsteps__newfootsteps.newfootsteps) in (
   (Array__Int.bool_eq !Accountmanagementsystem__mfootsteps.mfootsteps Measures__userid.first Measures__userid.last temp___standard__accountmanagementsystem_149 Measures__userid.first Measures__userid.last)))
   = True) ) ) }

   =
  ( ( () (* Assume dynamic property of params of the subprogram accountmanagementsystem.ads:75 *)
  ;
  assume { (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last Accountmanagementsystem__updatefootsteps__wearer.wearer) };
  assume { (Measures__footsteps.dynamic_property Measures__footsteps.first Measures__footsteps.last Accountmanagementsystem__updatefootsteps__newfootsteps.newfootsteps) } );
  ( ( () (* Declarations introduced by the compiler at the beginning of the subprogram accountmanagementsystem.ads:75 *)
  ;
  () (* Check for RTE in the Pre of the subprogram accountmanagementsystem.ads:75 *)
  ;
  abstract ensures {true}(Main.___ignore((Boolean.andb((( -1 ) <= Accountmanagementsystem__updatefootsteps__wearer.wearer)) ((Accountmanagementsystem__updatefootsteps__wearer.wearer <= 100))))) end ;
  () (* Assume Pre of the subprogram accountmanagementsystem.ads:75 *)
  ;
  assume { ( (( -1 ) <= Accountmanagementsystem__updatefootsteps__wearer.wearer) /\ (Accountmanagementsystem__updatefootsteps__wearer.wearer <= 100) ) } );
  ( abstract ensures {true}(Main.___ignore(!Accountmanagementsystem__mfootsteps.mfootsteps)) end ;
  (let temp___standard__accountmanagementsystem_147 = (any Accountmanagementsystem__footstepsarray.footstepsarray
  ensures {(result = !Accountmanagementsystem__mfootsteps.mfootsteps)} 
  ) in (
   ( () (* Check additional Pres of the subprogram accountmanagementsystem.ads:75 *)
   ;
   () (* Body of the subprogram accountmanagementsystem.ads:75 *)
   ;
   try
    ( ( "GP_Sloc:accountmanagementsystem.adb:61:26" Accountmanagementsystem__mfootsteps.mfootsteps := ( (Array__Int.set(!Accountmanagementsystem__mfootsteps.mfootsteps) (Accountmanagementsystem__updatefootsteps__wearer.wearer) ((Measures__footsteps.of_rep(Accountmanagementsystem__updatefootsteps__newfootsteps.newfootsteps)))) ) );
    raise Return__exc )
   with
    Return__exc -> ()
   end;
   () (* Check additional Posts and RTE in Post of the subprogram accountmanagementsystem.ads:75 *)
   ;
   abstract ensures {true}(Main.___ignore((let temp___standard__accountmanagementsystem_148 = (Temp___standard__accountmanagementsystem_51.temp___standard__accountmanagementsystem_51(temp___standard__accountmanagementsystem_147) (Accountmanagementsystem__updatefootsteps__wearer.wearer) (Accountmanagementsystem__updatefootsteps__newfootsteps.newfootsteps)) in (
    (Array__Int.bool_eq(!Accountmanagementsystem__mfootsteps.mfootsteps) (Measures__userid.first) (Measures__userid.last) (temp___standard__accountmanagementsystem_148) (Measures__userid.first) (Measures__userid.last))))
   )) end  )))
   ) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "updatelocation" defined at accountmanagementsystem.ads:80, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Accountmanagementsystem__updatelocation__subprogram_def
 use import "int".Int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Boolean
 use        Array__Int
 use        Measures__userid
 use        Accountmanagementsystem__locationsarray
 use        Accountmanagementsystem__locations
 use        Accountmanagementsystem__updatelocation__wearer
 use        Accountmanagementsystem__updatelocation__newlocation
 use        Temp___standard__accountmanagementsystem_59
 use        Accountmanagementsystem__locationsarray__axiom
 use        Accountmanagementsystem__locations__axiom
 use        Accountmanagementsystem__updatelocation__wearer__axiom
 use        Accountmanagementsystem__updatelocation__newlocation__axiom
 use        Measures__userid__axiom
 use        Measures__latitude__axiom
 use        Measures__longitude__axiom
 use        Measures__gpslocation__axiom

 let def "W:diverges:N" "GP_Subp:accountmanagementsystem.ads:80" 
   (__void_param : unit) 
  requires { true }
  ensures { ( "GP_Reason:VC_POSTCONDITION" "keep_on_simp" "GP_Shape:pragargs__cmp" "GP_Sloc:accountmanagementsystem.ads:83:14" "GP_Id:15" "comment:     Post => Locations = Locations'Old'Update(Wearer => NewLocation);
             ^ accountmanagementsystem.ads:83:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4311" "GP_Sloc:accountmanagementsystem.ads:83:14" ((let temp___standard__accountmanagementsystem_153 = (Temp___standard__accountmanagementsystem_59.temp___standard__accountmanagementsystem_59 (old !Accountmanagementsystem__locations.locations ) Accountmanagementsystem__updatelocation__wearer.wearer Accountmanagementsystem__updatelocation__newlocation.newlocation) in (
   (Array__Int.bool_eq !Accountmanagementsystem__locations.locations Measures__userid.first Measures__userid.last temp___standard__accountmanagementsystem_153 Measures__userid.first Measures__userid.last)))
   = True) ) ) }

   =
  ( ( () (* Assume dynamic property of params of the subprogram accountmanagementsystem.ads:80 *)
  ;
  assume { (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last Accountmanagementsystem__updatelocation__wearer.wearer) } );
  ( ( () (* Declarations introduced by the compiler at the beginning of the subprogram accountmanagementsystem.ads:80 *)
  ;
  () (* Check for RTE in the Pre of the subprogram accountmanagementsystem.ads:80 *)
  ;
  abstract ensures {true}(Main.___ignore((Boolean.andb((( -1 ) <= Accountmanagementsystem__updatelocation__wearer.wearer)) ((Accountmanagementsystem__updatelocation__wearer.wearer <= 100))))) end ;
  () (* Assume Pre of the subprogram accountmanagementsystem.ads:80 *)
  ;
  assume { ( (( -1 ) <= Accountmanagementsystem__updatelocation__wearer.wearer) /\ (Accountmanagementsystem__updatelocation__wearer.wearer <= 100) ) } );
  ( abstract ensures {true}(Main.___ignore(!Accountmanagementsystem__locations.locations)) end ;
  (let temp___standard__accountmanagementsystem_151 = (any Accountmanagementsystem__locationsarray.locationsarray
  ensures {(result = !Accountmanagementsystem__locations.locations)} 
  ) in (
   ( () (* Check additional Pres of the subprogram accountmanagementsystem.ads:80 *)
   ;
   () (* Body of the subprogram accountmanagementsystem.ads:80 *)
   ;
   try
    ( ( "GP_Sloc:accountmanagementsystem.adb:66:25" Accountmanagementsystem__locations.locations := ( (Array__Int.set(!Accountmanagementsystem__locations.locations) (Accountmanagementsystem__updatelocation__wearer.wearer) (Accountmanagementsystem__updatelocation__newlocation.newlocation)) ) );
    raise Return__exc )
   with
    Return__exc -> ()
   end;
   () (* Check additional Posts and RTE in Post of the subprogram accountmanagementsystem.ads:80 *)
   ;
   abstract ensures {true}(Main.___ignore((let temp___standard__accountmanagementsystem_152 = (Temp___standard__accountmanagementsystem_59.temp___standard__accountmanagementsystem_59(temp___standard__accountmanagementsystem_151) (Accountmanagementsystem__updatelocation__wearer.wearer) (Accountmanagementsystem__updatelocation__newlocation.newlocation)) in (
    (Array__Int.bool_eq(!Accountmanagementsystem__locations.locations) (Measures__userid.first) (Measures__userid.last) (temp___standard__accountmanagementsystem_152) (Measures__userid.first) (Measures__userid.last))))
   )) end  )))
   ) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "readvitals" defined at accountmanagementsystem.ads:88, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Accountmanagementsystem__readvitals__subprogram_def
 use import "int".Int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__userid
 use        Measures__bpm
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__vitalsarray
 use        Accountmanagementsystem__friends
 use        Accountmanagementsystem__vitals
 use        Accountmanagementsystem__readvitals__requester
 use        Accountmanagementsystem__readvitals__targetuser
 use        Accountmanagementsystem__useruserarray__axiom
 use        Accountmanagementsystem__vitalsarray__axiom
 use        Accountmanagementsystem__friends__axiom
 use        Accountmanagementsystem__vitals__axiom
 use        Accountmanagementsystem__readvitals__requester__axiom
 use        Accountmanagementsystem__readvitals__targetuser__axiom
 use        Measures__userid__axiom
 use        Measures__bpm__axiom

 val accountmanagementsystem__readvitals__result "\"GP_Ada_Name:ReadVitals'Result\""  : ref Measures__bpm.__split
 
 let def "W:diverges:N" "GP_Subp:accountmanagementsystem.ads:88" 
   (__void_param : unit) 
  requires { true }
  ensures { true }

   =
  ( ( () (* Assume dynamic property of params of the subprogram accountmanagementsystem.ads:88 *)
  ;
  assume { (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last Accountmanagementsystem__readvitals__requester.requester) };
  assume { (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last Accountmanagementsystem__readvitals__targetuser.targetuser) } );
  ( ( () (* Declarations introduced by the compiler at the beginning of the subprogram accountmanagementsystem.ads:88 *)
  ;
  () (* Check for RTE in the Pre of the subprogram accountmanagementsystem.ads:88 *)
  ;
  abstract ensures {true}(Main.___ignore(True)) end ;
  () (* Assume Pre of the subprogram accountmanagementsystem.ads:88 *)
  ;
  assume { true } );
  ( () (* Check additional Pres of the subprogram accountmanagementsystem.ads:88 *)
  ;
  () (* Body of the subprogram accountmanagementsystem.ads:88 *)
  ;
  try
   ( ( "GP_Sloc:accountmanagementsystem.ads:89:8" ( accountmanagementsystem__readvitals__result := ( (if (((Measures__userid.to_rep((Array__Int.get(!Accountmanagementsystem__friends.friends) (Accountmanagementsystem__readvitals__targetuser.targetuser)))) = Accountmanagementsystem__readvitals__requester.requester)) then (
    (Measures__bpm.to_rep((Array__Int.get(!Accountmanagementsystem__vitals.vitals) (Accountmanagementsystem__readvitals__targetuser.targetuser))))) else (
    ( -1 ))) );
   raise Return__exc ) );
   raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* Check additional Posts and RTE in Post of the subprogram accountmanagementsystem.ads:88 *)
  ;
  abstract ensures {true}(Main.___ignore(True)) end ;
  !accountmanagementsystem__readvitals__result ) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "readvitals_alt" defined at accountmanagementsystem.ads:96, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Accountmanagementsystem__readvitals_alt__subprogram_def
 use import "int".Int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Array__Int
 use        Measures__userid
 use        Measures__bpm
 use        Accountmanagementsystem__useruserarray
 use        Accountmanagementsystem__vitalsarray
 use        Accountmanagementsystem__friends
 use        Accountmanagementsystem__vitals
 use        Accountmanagementsystem__readvitals_alt__requester
 use        Accountmanagementsystem__readvitals_alt__targetuser
 use        Accountmanagementsystem__useruserarray__axiom
 use        Accountmanagementsystem__vitalsarray__axiom
 use        Accountmanagementsystem__friends__axiom
 use        Accountmanagementsystem__vitals__axiom
 use        Accountmanagementsystem__readvitals_alt__requester__axiom
 use        Accountmanagementsystem__readvitals_alt__targetuser__axiom
 use        Measures__userid__axiom
 use        Measures__bpm__axiom

 val accountmanagementsystem__readvitals_alt__result "\"GP_Ada_Name:ReadVitals_Alt'Result\""  : ref Measures__bpm.__split
 
 let def "W:diverges:N" "GP_Subp:accountmanagementsystem.ads:96" 
   (__void_param : unit) 
  requires { true }
  ensures { ( "GP_Reason:VC_POSTCONDITION" "keep_on_simp" "GP_Shape:pragargs__cmp" "GP_Sloc:accountmanagementsystem.ads:98:17" "GP_Id:16" "comment:   with Post => ReadVitals_Alt'Result = (if Friends(TargetUser) = Requester then
                ^ accountmanagementsystem.ads:98:17:VC_POSTCONDITION" ( "GP_Pretty_Ada:4385" "GP_Sloc:accountmanagementsystem.ads:98:17" (!accountmanagementsystem__readvitals_alt__result = (if (((Measures__userid.to_rep (Array__Int.get !Accountmanagementsystem__friends.friends Accountmanagementsystem__readvitals_alt__targetuser.targetuser)) = Accountmanagementsystem__readvitals_alt__requester.requester)) then (
   (Measures__bpm.to_rep (Array__Int.get !Accountmanagementsystem__vitals.vitals Accountmanagementsystem__readvitals_alt__targetuser.targetuser))) else (
   ( -1 )))) ) ) }

   =
  ( ( () (* Assume dynamic property of params of the subprogram accountmanagementsystem.ads:96 *)
  ;
  assume { (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last Accountmanagementsystem__readvitals_alt__requester.requester) };
  assume { (Measures__userid.dynamic_property Measures__userid.first Measures__userid.last Accountmanagementsystem__readvitals_alt__targetuser.targetuser) } );
  ( ( () (* Declarations introduced by the compiler at the beginning of the subprogram accountmanagementsystem.ads:96 *)
  ;
  () (* Check for RTE in the Pre of the subprogram accountmanagementsystem.ads:96 *)
  ;
  abstract ensures {true}(Main.___ignore(True)) end ;
  () (* Assume Pre of the subprogram accountmanagementsystem.ads:96 *)
  ;
  assume { true } );
  ( () (* Check additional Pres of the subprogram accountmanagementsystem.ads:96 *)
  ;
  () (* Body of the subprogram accountmanagementsystem.ads:96 *)
  ;
  try
   ( ( "GP_Sloc:accountmanagementsystem.adb:47:7" (if (((Measures__userid.to_rep((Array__Int.get(!Accountmanagementsystem__friends.friends) (Accountmanagementsystem__readvitals_alt__targetuser.targetuser)))) = Accountmanagementsystem__readvitals_alt__requester.requester)) then (
    ( "GP_Sloc:accountmanagementsystem.adb:48:10" ( accountmanagementsystem__readvitals_alt__result := ( (Measures__bpm.to_rep((Array__Int.get(!Accountmanagementsystem__vitals.vitals) (Accountmanagementsystem__readvitals_alt__targetuser.targetuser)))) );
    raise Return__exc ) )) else (
    ( "GP_Sloc:accountmanagementsystem.adb:50:10" ( accountmanagementsystem__readvitals_alt__result := ( ( -1 ) );
    raise Return__exc ) ))) );
   raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* Check additional Posts and RTE in Post of the subprogram accountmanagementsystem.ads:96 *)
  ;
  abstract ensures {true}(Main.___ignore((!accountmanagementsystem__readvitals_alt__result = (if (((Measures__userid.to_rep((Array__Int.get(!Accountmanagementsystem__friends.friends) (Accountmanagementsystem__readvitals_alt__targetuser.targetuser)))) = Accountmanagementsystem__readvitals_alt__requester.requester)) then (
   (Measures__bpm.to_rep((Array__Int.get(!Accountmanagementsystem__vitals.vitals) (Accountmanagementsystem__readvitals_alt__targetuser.targetuser))))) else (
   ( -1 )))))) end ;
  !accountmanagementsystem__readvitals_alt__result ) ) )
end
